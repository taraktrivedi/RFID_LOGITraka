//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4234
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace ZTraka_App {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ztATdbLocalDSReports1")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ztATdbLocalDSReports1 : global::System.Data.DataSet {
        
        private asset_mainDTDataTable tableasset_mainDT;
        
        private ReaderInfoDTDataTable tableReaderInfoDT;
        
        private UserInfoDTDataTable tableUserInfoDT;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ztATdbLocalDSReports1() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ztATdbLocalDSReports1(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["asset_mainDT"] != null)) {
                    base.Tables.Add(new asset_mainDTDataTable(ds.Tables["asset_mainDT"]));
                }
                if ((ds.Tables["ReaderInfoDT"] != null)) {
                    base.Tables.Add(new ReaderInfoDTDataTable(ds.Tables["ReaderInfoDT"]));
                }
                if ((ds.Tables["UserInfoDT"] != null)) {
                    base.Tables.Add(new UserInfoDTDataTable(ds.Tables["UserInfoDT"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public asset_mainDTDataTable asset_mainDT {
            get {
                return this.tableasset_mainDT;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ReaderInfoDTDataTable ReaderInfoDT {
            get {
                return this.tableReaderInfoDT;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UserInfoDTDataTable UserInfoDT {
            get {
                return this.tableUserInfoDT;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ztATdbLocalDSReports1 cln = ((ztATdbLocalDSReports1)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["asset_mainDT"] != null)) {
                    base.Tables.Add(new asset_mainDTDataTable(ds.Tables["asset_mainDT"]));
                }
                if ((ds.Tables["ReaderInfoDT"] != null)) {
                    base.Tables.Add(new ReaderInfoDTDataTable(ds.Tables["ReaderInfoDT"]));
                }
                if ((ds.Tables["UserInfoDT"] != null)) {
                    base.Tables.Add(new UserInfoDTDataTable(ds.Tables["UserInfoDT"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableasset_mainDT = ((asset_mainDTDataTable)(base.Tables["asset_mainDT"]));
            if ((initTable == true)) {
                if ((this.tableasset_mainDT != null)) {
                    this.tableasset_mainDT.InitVars();
                }
            }
            this.tableReaderInfoDT = ((ReaderInfoDTDataTable)(base.Tables["ReaderInfoDT"]));
            if ((initTable == true)) {
                if ((this.tableReaderInfoDT != null)) {
                    this.tableReaderInfoDT.InitVars();
                }
            }
            this.tableUserInfoDT = ((UserInfoDTDataTable)(base.Tables["UserInfoDT"]));
            if ((initTable == true)) {
                if ((this.tableUserInfoDT != null)) {
                    this.tableUserInfoDT.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ztATdbLocalDSReports1";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ztATdbLocalDSReports1.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableasset_mainDT = new asset_mainDTDataTable();
            base.Tables.Add(this.tableasset_mainDT);
            this.tableReaderInfoDT = new ReaderInfoDTDataTable();
            base.Tables.Add(this.tableReaderInfoDT);
            this.tableUserInfoDT = new UserInfoDTDataTable();
            base.Tables.Add(this.tableUserInfoDT);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeasset_mainDT() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeReaderInfoDT() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUserInfoDT() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ztATdbLocalDSReports1 ds = new ztATdbLocalDSReports1();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void asset_mainDTRowChangeEventHandler(object sender, asset_mainDTRowChangeEvent e);
        
        public delegate void ReaderInfoDTRowChangeEventHandler(object sender, ReaderInfoDTRowChangeEvent e);
        
        public delegate void UserInfoDTRowChangeEventHandler(object sender, UserInfoDTRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class asset_mainDTDataTable : global::System.Data.TypedTableBase<asset_mainDTRow> {
            
            private global::System.Data.DataColumn columnasset_id;
            
            private global::System.Data.DataColumn columntag_id;
            
            private global::System.Data.DataColumn columnasset_location;
            
            private global::System.Data.DataColumn columnasset_category;
            
            private global::System.Data.DataColumn columnasset_desc;
            
            private global::System.Data.DataColumn columnasset_tag_created;
            
            private global::System.Data.DataColumn columnasset_model;
            
            private global::System.Data.DataColumn columnasset_quantity;
            
            private global::System.Data.DataColumn columnasset_comments;
            
            private global::System.Data.DataColumn columnasset_image;
            
            private global::System.Data.DataColumn columnasset_id1;
            
            private global::System.Data.DataColumn columntag_id1;
            
            private global::System.Data.DataColumn columnasset_lastchecked;
            
            private global::System.Data.DataColumn columnasset_lastloc;
            
            private global::System.Data.DataColumn columnasset_maint_due;
            
            private global::System.Data.DataColumn columntag_expiry;
            
            private global::System.Data.DataColumn columnasset_status;
            
            private global::System.Data.DataColumn columnasset_alarms;
            
            private global::System.Data.DataColumn columnasset_value;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public asset_mainDTDataTable() {
                this.TableName = "asset_mainDT";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal asset_mainDTDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected asset_mainDTDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn asset_idColumn {
                get {
                    return this.columnasset_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tag_idColumn {
                get {
                    return this.columntag_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn asset_locationColumn {
                get {
                    return this.columnasset_location;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn asset_categoryColumn {
                get {
                    return this.columnasset_category;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn asset_descColumn {
                get {
                    return this.columnasset_desc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn asset_tag_createdColumn {
                get {
                    return this.columnasset_tag_created;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn asset_modelColumn {
                get {
                    return this.columnasset_model;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn asset_quantityColumn {
                get {
                    return this.columnasset_quantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn asset_commentsColumn {
                get {
                    return this.columnasset_comments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn asset_imageColumn {
                get {
                    return this.columnasset_image;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn asset_id1Column {
                get {
                    return this.columnasset_id1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tag_id1Column {
                get {
                    return this.columntag_id1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn asset_lastcheckedColumn {
                get {
                    return this.columnasset_lastchecked;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn asset_lastlocColumn {
                get {
                    return this.columnasset_lastloc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn asset_maint_dueColumn {
                get {
                    return this.columnasset_maint_due;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tag_expiryColumn {
                get {
                    return this.columntag_expiry;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn asset_statusColumn {
                get {
                    return this.columnasset_status;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn asset_alarmsColumn {
                get {
                    return this.columnasset_alarms;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn asset_valueColumn {
                get {
                    return this.columnasset_value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public asset_mainDTRow this[int index] {
                get {
                    return ((asset_mainDTRow)(this.Rows[index]));
                }
            }
            
            public event asset_mainDTRowChangeEventHandler asset_mainDTRowChanging;
            
            public event asset_mainDTRowChangeEventHandler asset_mainDTRowChanged;
            
            public event asset_mainDTRowChangeEventHandler asset_mainDTRowDeleting;
            
            public event asset_mainDTRowChangeEventHandler asset_mainDTRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Addasset_mainDTRow(asset_mainDTRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public asset_mainDTRow Addasset_mainDTRow(
                        string asset_id, 
                        string tag_id, 
                        string asset_location, 
                        string asset_category, 
                        string asset_desc, 
                        System.DateTime asset_tag_created, 
                        string asset_model, 
                        short asset_quantity, 
                        string asset_comments, 
                        byte[] asset_image, 
                        string asset_id1, 
                        string tag_id1, 
                        System.DateTime asset_lastchecked, 
                        string asset_lastloc, 
                        System.DateTime asset_maint_due, 
                        System.DateTime tag_expiry, 
                        string asset_status, 
                        string asset_alarms, 
                        decimal asset_value) {
                asset_mainDTRow rowasset_mainDTRow = ((asset_mainDTRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        asset_id,
                        tag_id,
                        asset_location,
                        asset_category,
                        asset_desc,
                        asset_tag_created,
                        asset_model,
                        asset_quantity,
                        asset_comments,
                        asset_image,
                        asset_id1,
                        tag_id1,
                        asset_lastchecked,
                        asset_lastloc,
                        asset_maint_due,
                        tag_expiry,
                        asset_status,
                        asset_alarms,
                        asset_value};
                rowasset_mainDTRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowasset_mainDTRow);
                return rowasset_mainDTRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public asset_mainDTRow FindByasset_id(string asset_id) {
                return ((asset_mainDTRow)(this.Rows.Find(new object[] {
                            asset_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                asset_mainDTDataTable cln = ((asset_mainDTDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new asset_mainDTDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnasset_id = base.Columns["asset_id"];
                this.columntag_id = base.Columns["tag_id"];
                this.columnasset_location = base.Columns["asset_location"];
                this.columnasset_category = base.Columns["asset_category"];
                this.columnasset_desc = base.Columns["asset_desc"];
                this.columnasset_tag_created = base.Columns["asset_tag_created"];
                this.columnasset_model = base.Columns["asset_model"];
                this.columnasset_quantity = base.Columns["asset_quantity"];
                this.columnasset_comments = base.Columns["asset_comments"];
                this.columnasset_image = base.Columns["asset_image"];
                this.columnasset_id1 = base.Columns["asset_id1"];
                this.columntag_id1 = base.Columns["tag_id1"];
                this.columnasset_lastchecked = base.Columns["asset_lastchecked"];
                this.columnasset_lastloc = base.Columns["asset_lastloc"];
                this.columnasset_maint_due = base.Columns["asset_maint_due"];
                this.columntag_expiry = base.Columns["tag_expiry"];
                this.columnasset_status = base.Columns["asset_status"];
                this.columnasset_alarms = base.Columns["asset_alarms"];
                this.columnasset_value = base.Columns["asset_value"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnasset_id = new global::System.Data.DataColumn("asset_id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnasset_id);
                this.columntag_id = new global::System.Data.DataColumn("tag_id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntag_id);
                this.columnasset_location = new global::System.Data.DataColumn("asset_location", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnasset_location);
                this.columnasset_category = new global::System.Data.DataColumn("asset_category", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnasset_category);
                this.columnasset_desc = new global::System.Data.DataColumn("asset_desc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnasset_desc);
                this.columnasset_tag_created = new global::System.Data.DataColumn("asset_tag_created", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnasset_tag_created);
                this.columnasset_model = new global::System.Data.DataColumn("asset_model", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnasset_model);
                this.columnasset_quantity = new global::System.Data.DataColumn("asset_quantity", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnasset_quantity);
                this.columnasset_comments = new global::System.Data.DataColumn("asset_comments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnasset_comments);
                this.columnasset_image = new global::System.Data.DataColumn("asset_image", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnasset_image);
                this.columnasset_id1 = new global::System.Data.DataColumn("asset_id1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnasset_id1);
                this.columntag_id1 = new global::System.Data.DataColumn("tag_id1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntag_id1);
                this.columnasset_lastchecked = new global::System.Data.DataColumn("asset_lastchecked", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnasset_lastchecked);
                this.columnasset_lastloc = new global::System.Data.DataColumn("asset_lastloc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnasset_lastloc);
                this.columnasset_maint_due = new global::System.Data.DataColumn("asset_maint_due", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnasset_maint_due);
                this.columntag_expiry = new global::System.Data.DataColumn("tag_expiry", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntag_expiry);
                this.columnasset_status = new global::System.Data.DataColumn("asset_status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnasset_status);
                this.columnasset_alarms = new global::System.Data.DataColumn("asset_alarms", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnasset_alarms);
                this.columnasset_value = new global::System.Data.DataColumn("asset_value", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnasset_value);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnasset_id}, true));
                this.columnasset_id.AllowDBNull = false;
                this.columnasset_id.Unique = true;
                this.columnasset_id.MaxLength = 10;
                this.columntag_id.AllowDBNull = false;
                this.columntag_id.MaxLength = 10;
                this.columnasset_location.AllowDBNull = false;
                this.columnasset_location.MaxLength = 20;
                this.columnasset_category.AllowDBNull = false;
                this.columnasset_category.MaxLength = 10;
                this.columnasset_desc.AllowDBNull = false;
                this.columnasset_desc.MaxLength = 1073741823;
                this.columnasset_model.MaxLength = 10;
                this.columnasset_comments.MaxLength = 1073741823;
                this.columnasset_id1.AllowDBNull = false;
                this.columnasset_id1.MaxLength = 10;
                this.columntag_id1.AllowDBNull = false;
                this.columntag_id1.MaxLength = 10;
                this.columnasset_lastloc.MaxLength = 20;
                this.columnasset_status.AllowDBNull = false;
                this.columnasset_status.MaxLength = 15;
                this.columnasset_alarms.MaxLength = 10;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public asset_mainDTRow Newasset_mainDTRow() {
                return ((asset_mainDTRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new asset_mainDTRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(asset_mainDTRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.asset_mainDTRowChanged != null)) {
                    this.asset_mainDTRowChanged(this, new asset_mainDTRowChangeEvent(((asset_mainDTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.asset_mainDTRowChanging != null)) {
                    this.asset_mainDTRowChanging(this, new asset_mainDTRowChangeEvent(((asset_mainDTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.asset_mainDTRowDeleted != null)) {
                    this.asset_mainDTRowDeleted(this, new asset_mainDTRowChangeEvent(((asset_mainDTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.asset_mainDTRowDeleting != null)) {
                    this.asset_mainDTRowDeleting(this, new asset_mainDTRowChangeEvent(((asset_mainDTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Removeasset_mainDTRow(asset_mainDTRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ztATdbLocalDSReports1 ds = new ztATdbLocalDSReports1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "asset_mainDTDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ReaderInfoDTDataTable : global::System.Data.TypedTableBase<ReaderInfoDTRow> {
            
            private global::System.Data.DataColumn columnreader_id;
            
            private global::System.Data.DataColumn columnlocation_id;
            
            private global::System.Data.DataColumn columnfloor_id;
            
            private global::System.Data.DataColumn columnmap_floor;
            
            private global::System.Data.DataColumn columnasset_info;
            
            private global::System.Data.DataColumn columnreader_info;
            
            private global::System.Data.DataColumn columnfloor_id1;
            
            private global::System.Data.DataColumn columnmap_floor1;
            
            private global::System.Data.DataColumn columnrooms_pfloor;
            
            private global::System.Data.DataColumn columnassets_pfloor;
            
            private global::System.Data.DataColumn columnmap_comments;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReaderInfoDTDataTable() {
                this.TableName = "ReaderInfoDT";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReaderInfoDTDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ReaderInfoDTDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn reader_idColumn {
                get {
                    return this.columnreader_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn location_idColumn {
                get {
                    return this.columnlocation_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn floor_idColumn {
                get {
                    return this.columnfloor_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn map_floorColumn {
                get {
                    return this.columnmap_floor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn asset_infoColumn {
                get {
                    return this.columnasset_info;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn reader_infoColumn {
                get {
                    return this.columnreader_info;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn floor_id1Column {
                get {
                    return this.columnfloor_id1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn map_floor1Column {
                get {
                    return this.columnmap_floor1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn rooms_pfloorColumn {
                get {
                    return this.columnrooms_pfloor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn assets_pfloorColumn {
                get {
                    return this.columnassets_pfloor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn map_commentsColumn {
                get {
                    return this.columnmap_comments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReaderInfoDTRow this[int index] {
                get {
                    return ((ReaderInfoDTRow)(this.Rows[index]));
                }
            }
            
            public event ReaderInfoDTRowChangeEventHandler ReaderInfoDTRowChanging;
            
            public event ReaderInfoDTRowChangeEventHandler ReaderInfoDTRowChanged;
            
            public event ReaderInfoDTRowChangeEventHandler ReaderInfoDTRowDeleting;
            
            public event ReaderInfoDTRowChangeEventHandler ReaderInfoDTRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddReaderInfoDTRow(ReaderInfoDTRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReaderInfoDTRow AddReaderInfoDTRow(string reader_id, string location_id, string floor_id, string map_floor, string asset_info, string reader_info, string floor_id1, string map_floor1, short rooms_pfloor, short assets_pfloor, string map_comments) {
                ReaderInfoDTRow rowReaderInfoDTRow = ((ReaderInfoDTRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        reader_id,
                        location_id,
                        floor_id,
                        map_floor,
                        asset_info,
                        reader_info,
                        floor_id1,
                        map_floor1,
                        rooms_pfloor,
                        assets_pfloor,
                        map_comments};
                rowReaderInfoDTRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowReaderInfoDTRow);
                return rowReaderInfoDTRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReaderInfoDTRow FindByreader_id(string reader_id) {
                return ((ReaderInfoDTRow)(this.Rows.Find(new object[] {
                            reader_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ReaderInfoDTDataTable cln = ((ReaderInfoDTDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ReaderInfoDTDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnreader_id = base.Columns["reader_id"];
                this.columnlocation_id = base.Columns["location_id"];
                this.columnfloor_id = base.Columns["floor_id"];
                this.columnmap_floor = base.Columns["map_floor"];
                this.columnasset_info = base.Columns["asset_info"];
                this.columnreader_info = base.Columns["reader_info"];
                this.columnfloor_id1 = base.Columns["floor_id1"];
                this.columnmap_floor1 = base.Columns["map_floor1"];
                this.columnrooms_pfloor = base.Columns["rooms_pfloor"];
                this.columnassets_pfloor = base.Columns["assets_pfloor"];
                this.columnmap_comments = base.Columns["map_comments"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnreader_id = new global::System.Data.DataColumn("reader_id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreader_id);
                this.columnlocation_id = new global::System.Data.DataColumn("location_id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlocation_id);
                this.columnfloor_id = new global::System.Data.DataColumn("floor_id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfloor_id);
                this.columnmap_floor = new global::System.Data.DataColumn("map_floor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmap_floor);
                this.columnasset_info = new global::System.Data.DataColumn("asset_info", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnasset_info);
                this.columnreader_info = new global::System.Data.DataColumn("reader_info", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreader_info);
                this.columnfloor_id1 = new global::System.Data.DataColumn("floor_id1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfloor_id1);
                this.columnmap_floor1 = new global::System.Data.DataColumn("map_floor1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmap_floor1);
                this.columnrooms_pfloor = new global::System.Data.DataColumn("rooms_pfloor", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrooms_pfloor);
                this.columnassets_pfloor = new global::System.Data.DataColumn("assets_pfloor", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnassets_pfloor);
                this.columnmap_comments = new global::System.Data.DataColumn("map_comments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmap_comments);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnreader_id}, true));
                this.columnreader_id.AllowDBNull = false;
                this.columnreader_id.Unique = true;
                this.columnreader_id.MaxLength = 10;
                this.columnlocation_id.AllowDBNull = false;
                this.columnlocation_id.MaxLength = 10;
                this.columnfloor_id.AllowDBNull = false;
                this.columnfloor_id.MaxLength = 10;
                this.columnmap_floor.MaxLength = 10;
                this.columnasset_info.MaxLength = 10;
                this.columnreader_info.MaxLength = 1073741823;
                this.columnfloor_id1.AllowDBNull = false;
                this.columnfloor_id1.MaxLength = 10;
                this.columnmap_floor1.AllowDBNull = false;
                this.columnmap_floor1.MaxLength = 10;
                this.columnmap_comments.MaxLength = 1073741823;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReaderInfoDTRow NewReaderInfoDTRow() {
                return ((ReaderInfoDTRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ReaderInfoDTRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ReaderInfoDTRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ReaderInfoDTRowChanged != null)) {
                    this.ReaderInfoDTRowChanged(this, new ReaderInfoDTRowChangeEvent(((ReaderInfoDTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ReaderInfoDTRowChanging != null)) {
                    this.ReaderInfoDTRowChanging(this, new ReaderInfoDTRowChangeEvent(((ReaderInfoDTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ReaderInfoDTRowDeleted != null)) {
                    this.ReaderInfoDTRowDeleted(this, new ReaderInfoDTRowChangeEvent(((ReaderInfoDTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ReaderInfoDTRowDeleting != null)) {
                    this.ReaderInfoDTRowDeleting(this, new ReaderInfoDTRowChangeEvent(((ReaderInfoDTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveReaderInfoDTRow(ReaderInfoDTRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ztATdbLocalDSReports1 ds = new ztATdbLocalDSReports1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ReaderInfoDTDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UserInfoDTDataTable : global::System.Data.TypedTableBase<UserInfoDTRow> {
            
            private global::System.Data.DataColumn columnuser_id;
            
            private global::System.Data.DataColumn columnuser_name;
            
            private global::System.Data.DataColumn columnuser_pass;
            
            private global::System.Data.DataColumn columnuser_role;
            
            private global::System.Data.DataColumn columnuser_dept;
            
            private global::System.Data.DataColumn columnuser_contact;
            
            private global::System.Data.DataColumn columnuser_email;
            
            private global::System.Data.DataColumn columnuser_roleid;
            
            private global::System.Data.DataColumn columnuser_last_login;
            
            private global::System.Data.DataColumn columnuser_last_update;
            
            private global::System.Data.DataColumn columnuser_id1;
            
            private global::System.Data.DataColumn columnuser_roleid1;
            
            private global::System.Data.DataColumn columndate_created;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserInfoDTDataTable() {
                this.TableName = "UserInfoDT";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UserInfoDTDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UserInfoDTDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn user_idColumn {
                get {
                    return this.columnuser_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn user_nameColumn {
                get {
                    return this.columnuser_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn user_passColumn {
                get {
                    return this.columnuser_pass;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn user_roleColumn {
                get {
                    return this.columnuser_role;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn user_deptColumn {
                get {
                    return this.columnuser_dept;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn user_contactColumn {
                get {
                    return this.columnuser_contact;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn user_emailColumn {
                get {
                    return this.columnuser_email;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn user_roleidColumn {
                get {
                    return this.columnuser_roleid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn user_last_loginColumn {
                get {
                    return this.columnuser_last_login;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn user_last_updateColumn {
                get {
                    return this.columnuser_last_update;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn user_id1Column {
                get {
                    return this.columnuser_id1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn user_roleid1Column {
                get {
                    return this.columnuser_roleid1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn date_createdColumn {
                get {
                    return this.columndate_created;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserInfoDTRow this[int index] {
                get {
                    return ((UserInfoDTRow)(this.Rows[index]));
                }
            }
            
            public event UserInfoDTRowChangeEventHandler UserInfoDTRowChanging;
            
            public event UserInfoDTRowChangeEventHandler UserInfoDTRowChanged;
            
            public event UserInfoDTRowChangeEventHandler UserInfoDTRowDeleting;
            
            public event UserInfoDTRowChangeEventHandler UserInfoDTRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUserInfoDTRow(UserInfoDTRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserInfoDTRow AddUserInfoDTRow(string user_id, string user_name, string user_pass, string user_role, string user_dept, string user_contact, string user_email, string user_roleid, System.DateTime user_last_login, System.DateTime user_last_update, string user_id1, string user_roleid1, System.DateTime date_created) {
                UserInfoDTRow rowUserInfoDTRow = ((UserInfoDTRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        user_id,
                        user_name,
                        user_pass,
                        user_role,
                        user_dept,
                        user_contact,
                        user_email,
                        user_roleid,
                        user_last_login,
                        user_last_update,
                        user_id1,
                        user_roleid1,
                        date_created};
                rowUserInfoDTRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUserInfoDTRow);
                return rowUserInfoDTRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserInfoDTRow FindByuser_id(string user_id) {
                return ((UserInfoDTRow)(this.Rows.Find(new object[] {
                            user_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                UserInfoDTDataTable cln = ((UserInfoDTDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new UserInfoDTDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnuser_id = base.Columns["user_id"];
                this.columnuser_name = base.Columns["user_name"];
                this.columnuser_pass = base.Columns["user_pass"];
                this.columnuser_role = base.Columns["user_role"];
                this.columnuser_dept = base.Columns["user_dept"];
                this.columnuser_contact = base.Columns["user_contact"];
                this.columnuser_email = base.Columns["user_email"];
                this.columnuser_roleid = base.Columns["user_roleid"];
                this.columnuser_last_login = base.Columns["user_last_login"];
                this.columnuser_last_update = base.Columns["user_last_update"];
                this.columnuser_id1 = base.Columns["user_id1"];
                this.columnuser_roleid1 = base.Columns["user_roleid1"];
                this.columndate_created = base.Columns["date_created"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnuser_id = new global::System.Data.DataColumn("user_id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuser_id);
                this.columnuser_name = new global::System.Data.DataColumn("user_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuser_name);
                this.columnuser_pass = new global::System.Data.DataColumn("user_pass", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuser_pass);
                this.columnuser_role = new global::System.Data.DataColumn("user_role", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuser_role);
                this.columnuser_dept = new global::System.Data.DataColumn("user_dept", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuser_dept);
                this.columnuser_contact = new global::System.Data.DataColumn("user_contact", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuser_contact);
                this.columnuser_email = new global::System.Data.DataColumn("user_email", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuser_email);
                this.columnuser_roleid = new global::System.Data.DataColumn("user_roleid", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuser_roleid);
                this.columnuser_last_login = new global::System.Data.DataColumn("user_last_login", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuser_last_login);
                this.columnuser_last_update = new global::System.Data.DataColumn("user_last_update", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuser_last_update);
                this.columnuser_id1 = new global::System.Data.DataColumn("user_id1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuser_id1);
                this.columnuser_roleid1 = new global::System.Data.DataColumn("user_roleid1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuser_roleid1);
                this.columndate_created = new global::System.Data.DataColumn("date_created", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columndate_created);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnuser_id}, true));
                this.columnuser_id.AllowDBNull = false;
                this.columnuser_id.Unique = true;
                this.columnuser_id.MaxLength = 10;
                this.columnuser_name.AllowDBNull = false;
                this.columnuser_name.MaxLength = 25;
                this.columnuser_pass.AllowDBNull = false;
                this.columnuser_pass.MaxLength = 40;
                this.columnuser_role.AllowDBNull = false;
                this.columnuser_role.MaxLength = 10;
                this.columnuser_dept.MaxLength = 10;
                this.columnuser_contact.MaxLength = 50;
                this.columnuser_email.MaxLength = 30;
                this.columnuser_roleid.AllowDBNull = false;
                this.columnuser_roleid.MaxLength = 10;
                this.columnuser_id1.AllowDBNull = false;
                this.columnuser_id1.MaxLength = 10;
                this.columnuser_roleid1.AllowDBNull = false;
                this.columnuser_roleid1.MaxLength = 10;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserInfoDTRow NewUserInfoDTRow() {
                return ((UserInfoDTRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new UserInfoDTRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(UserInfoDTRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UserInfoDTRowChanged != null)) {
                    this.UserInfoDTRowChanged(this, new UserInfoDTRowChangeEvent(((UserInfoDTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UserInfoDTRowChanging != null)) {
                    this.UserInfoDTRowChanging(this, new UserInfoDTRowChangeEvent(((UserInfoDTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UserInfoDTRowDeleted != null)) {
                    this.UserInfoDTRowDeleted(this, new UserInfoDTRowChangeEvent(((UserInfoDTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UserInfoDTRowDeleting != null)) {
                    this.UserInfoDTRowDeleting(this, new UserInfoDTRowChangeEvent(((UserInfoDTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUserInfoDTRow(UserInfoDTRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ztATdbLocalDSReports1 ds = new ztATdbLocalDSReports1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UserInfoDTDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class asset_mainDTRow : global::System.Data.DataRow {
            
            private asset_mainDTDataTable tableasset_mainDT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal asset_mainDTRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableasset_mainDT = ((asset_mainDTDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string asset_id {
                get {
                    return ((string)(this[this.tableasset_mainDT.asset_idColumn]));
                }
                set {
                    this[this.tableasset_mainDT.asset_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tag_id {
                get {
                    return ((string)(this[this.tableasset_mainDT.tag_idColumn]));
                }
                set {
                    this[this.tableasset_mainDT.tag_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string asset_location {
                get {
                    return ((string)(this[this.tableasset_mainDT.asset_locationColumn]));
                }
                set {
                    this[this.tableasset_mainDT.asset_locationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string asset_category {
                get {
                    return ((string)(this[this.tableasset_mainDT.asset_categoryColumn]));
                }
                set {
                    this[this.tableasset_mainDT.asset_categoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string asset_desc {
                get {
                    return ((string)(this[this.tableasset_mainDT.asset_descColumn]));
                }
                set {
                    this[this.tableasset_mainDT.asset_descColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime asset_tag_created {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableasset_mainDT.asset_tag_createdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'asset_tag_created\' in table \'asset_mainDT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableasset_mainDT.asset_tag_createdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string asset_model {
                get {
                    try {
                        return ((string)(this[this.tableasset_mainDT.asset_modelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'asset_model\' in table \'asset_mainDT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableasset_mainDT.asset_modelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short asset_quantity {
                get {
                    try {
                        return ((short)(this[this.tableasset_mainDT.asset_quantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'asset_quantity\' in table \'asset_mainDT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableasset_mainDT.asset_quantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string asset_comments {
                get {
                    try {
                        return ((string)(this[this.tableasset_mainDT.asset_commentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'asset_comments\' in table \'asset_mainDT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableasset_mainDT.asset_commentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] asset_image {
                get {
                    try {
                        return ((byte[])(this[this.tableasset_mainDT.asset_imageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'asset_image\' in table \'asset_mainDT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableasset_mainDT.asset_imageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string asset_id1 {
                get {
                    return ((string)(this[this.tableasset_mainDT.asset_id1Column]));
                }
                set {
                    this[this.tableasset_mainDT.asset_id1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tag_id1 {
                get {
                    return ((string)(this[this.tableasset_mainDT.tag_id1Column]));
                }
                set {
                    this[this.tableasset_mainDT.tag_id1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime asset_lastchecked {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableasset_mainDT.asset_lastcheckedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'asset_lastchecked\' in table \'asset_mainDT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableasset_mainDT.asset_lastcheckedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string asset_lastloc {
                get {
                    try {
                        return ((string)(this[this.tableasset_mainDT.asset_lastlocColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'asset_lastloc\' in table \'asset_mainDT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableasset_mainDT.asset_lastlocColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime asset_maint_due {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableasset_mainDT.asset_maint_dueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'asset_maint_due\' in table \'asset_mainDT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableasset_mainDT.asset_maint_dueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime tag_expiry {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableasset_mainDT.tag_expiryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tag_expiry\' in table \'asset_mainDT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableasset_mainDT.tag_expiryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string asset_status {
                get {
                    return ((string)(this[this.tableasset_mainDT.asset_statusColumn]));
                }
                set {
                    this[this.tableasset_mainDT.asset_statusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string asset_alarms {
                get {
                    try {
                        return ((string)(this[this.tableasset_mainDT.asset_alarmsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'asset_alarms\' in table \'asset_mainDT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableasset_mainDT.asset_alarmsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal asset_value {
                get {
                    try {
                        return ((decimal)(this[this.tableasset_mainDT.asset_valueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'asset_value\' in table \'asset_mainDT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableasset_mainDT.asset_valueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isasset_tag_createdNull() {
                return this.IsNull(this.tableasset_mainDT.asset_tag_createdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setasset_tag_createdNull() {
                this[this.tableasset_mainDT.asset_tag_createdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isasset_modelNull() {
                return this.IsNull(this.tableasset_mainDT.asset_modelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setasset_modelNull() {
                this[this.tableasset_mainDT.asset_modelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isasset_quantityNull() {
                return this.IsNull(this.tableasset_mainDT.asset_quantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setasset_quantityNull() {
                this[this.tableasset_mainDT.asset_quantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isasset_commentsNull() {
                return this.IsNull(this.tableasset_mainDT.asset_commentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setasset_commentsNull() {
                this[this.tableasset_mainDT.asset_commentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isasset_imageNull() {
                return this.IsNull(this.tableasset_mainDT.asset_imageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setasset_imageNull() {
                this[this.tableasset_mainDT.asset_imageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isasset_lastcheckedNull() {
                return this.IsNull(this.tableasset_mainDT.asset_lastcheckedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setasset_lastcheckedNull() {
                this[this.tableasset_mainDT.asset_lastcheckedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isasset_lastlocNull() {
                return this.IsNull(this.tableasset_mainDT.asset_lastlocColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setasset_lastlocNull() {
                this[this.tableasset_mainDT.asset_lastlocColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isasset_maint_dueNull() {
                return this.IsNull(this.tableasset_mainDT.asset_maint_dueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setasset_maint_dueNull() {
                this[this.tableasset_mainDT.asset_maint_dueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istag_expiryNull() {
                return this.IsNull(this.tableasset_mainDT.tag_expiryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settag_expiryNull() {
                this[this.tableasset_mainDT.tag_expiryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isasset_alarmsNull() {
                return this.IsNull(this.tableasset_mainDT.asset_alarmsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setasset_alarmsNull() {
                this[this.tableasset_mainDT.asset_alarmsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isasset_valueNull() {
                return this.IsNull(this.tableasset_mainDT.asset_valueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setasset_valueNull() {
                this[this.tableasset_mainDT.asset_valueColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ReaderInfoDTRow : global::System.Data.DataRow {
            
            private ReaderInfoDTDataTable tableReaderInfoDT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReaderInfoDTRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableReaderInfoDT = ((ReaderInfoDTDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string reader_id {
                get {
                    return ((string)(this[this.tableReaderInfoDT.reader_idColumn]));
                }
                set {
                    this[this.tableReaderInfoDT.reader_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string location_id {
                get {
                    return ((string)(this[this.tableReaderInfoDT.location_idColumn]));
                }
                set {
                    this[this.tableReaderInfoDT.location_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string floor_id {
                get {
                    return ((string)(this[this.tableReaderInfoDT.floor_idColumn]));
                }
                set {
                    this[this.tableReaderInfoDT.floor_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string map_floor {
                get {
                    try {
                        return ((string)(this[this.tableReaderInfoDT.map_floorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'map_floor\' in table \'ReaderInfoDT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReaderInfoDT.map_floorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string asset_info {
                get {
                    try {
                        return ((string)(this[this.tableReaderInfoDT.asset_infoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'asset_info\' in table \'ReaderInfoDT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReaderInfoDT.asset_infoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string reader_info {
                get {
                    try {
                        return ((string)(this[this.tableReaderInfoDT.reader_infoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'reader_info\' in table \'ReaderInfoDT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReaderInfoDT.reader_infoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string floor_id1 {
                get {
                    return ((string)(this[this.tableReaderInfoDT.floor_id1Column]));
                }
                set {
                    this[this.tableReaderInfoDT.floor_id1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string map_floor1 {
                get {
                    return ((string)(this[this.tableReaderInfoDT.map_floor1Column]));
                }
                set {
                    this[this.tableReaderInfoDT.map_floor1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short rooms_pfloor {
                get {
                    try {
                        return ((short)(this[this.tableReaderInfoDT.rooms_pfloorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'rooms_pfloor\' in table \'ReaderInfoDT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReaderInfoDT.rooms_pfloorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short assets_pfloor {
                get {
                    try {
                        return ((short)(this[this.tableReaderInfoDT.assets_pfloorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'assets_pfloor\' in table \'ReaderInfoDT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReaderInfoDT.assets_pfloorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string map_comments {
                get {
                    try {
                        return ((string)(this[this.tableReaderInfoDT.map_commentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'map_comments\' in table \'ReaderInfoDT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReaderInfoDT.map_commentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismap_floorNull() {
                return this.IsNull(this.tableReaderInfoDT.map_floorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmap_floorNull() {
                this[this.tableReaderInfoDT.map_floorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isasset_infoNull() {
                return this.IsNull(this.tableReaderInfoDT.asset_infoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setasset_infoNull() {
                this[this.tableReaderInfoDT.asset_infoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isreader_infoNull() {
                return this.IsNull(this.tableReaderInfoDT.reader_infoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setreader_infoNull() {
                this[this.tableReaderInfoDT.reader_infoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isrooms_pfloorNull() {
                return this.IsNull(this.tableReaderInfoDT.rooms_pfloorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setrooms_pfloorNull() {
                this[this.tableReaderInfoDT.rooms_pfloorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isassets_pfloorNull() {
                return this.IsNull(this.tableReaderInfoDT.assets_pfloorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setassets_pfloorNull() {
                this[this.tableReaderInfoDT.assets_pfloorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismap_commentsNull() {
                return this.IsNull(this.tableReaderInfoDT.map_commentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmap_commentsNull() {
                this[this.tableReaderInfoDT.map_commentsColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UserInfoDTRow : global::System.Data.DataRow {
            
            private UserInfoDTDataTable tableUserInfoDT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UserInfoDTRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUserInfoDT = ((UserInfoDTDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string user_id {
                get {
                    return ((string)(this[this.tableUserInfoDT.user_idColumn]));
                }
                set {
                    this[this.tableUserInfoDT.user_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string user_name {
                get {
                    return ((string)(this[this.tableUserInfoDT.user_nameColumn]));
                }
                set {
                    this[this.tableUserInfoDT.user_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string user_pass {
                get {
                    return ((string)(this[this.tableUserInfoDT.user_passColumn]));
                }
                set {
                    this[this.tableUserInfoDT.user_passColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string user_role {
                get {
                    return ((string)(this[this.tableUserInfoDT.user_roleColumn]));
                }
                set {
                    this[this.tableUserInfoDT.user_roleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string user_dept {
                get {
                    try {
                        return ((string)(this[this.tableUserInfoDT.user_deptColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'user_dept\' in table \'UserInfoDT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUserInfoDT.user_deptColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string user_contact {
                get {
                    try {
                        return ((string)(this[this.tableUserInfoDT.user_contactColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'user_contact\' in table \'UserInfoDT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUserInfoDT.user_contactColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string user_email {
                get {
                    try {
                        return ((string)(this[this.tableUserInfoDT.user_emailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'user_email\' in table \'UserInfoDT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUserInfoDT.user_emailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string user_roleid {
                get {
                    return ((string)(this[this.tableUserInfoDT.user_roleidColumn]));
                }
                set {
                    this[this.tableUserInfoDT.user_roleidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime user_last_login {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableUserInfoDT.user_last_loginColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'user_last_login\' in table \'UserInfoDT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUserInfoDT.user_last_loginColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime user_last_update {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableUserInfoDT.user_last_updateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'user_last_update\' in table \'UserInfoDT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUserInfoDT.user_last_updateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string user_id1 {
                get {
                    return ((string)(this[this.tableUserInfoDT.user_id1Column]));
                }
                set {
                    this[this.tableUserInfoDT.user_id1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string user_roleid1 {
                get {
                    return ((string)(this[this.tableUserInfoDT.user_roleid1Column]));
                }
                set {
                    this[this.tableUserInfoDT.user_roleid1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime date_created {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableUserInfoDT.date_createdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'date_created\' in table \'UserInfoDT\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUserInfoDT.date_createdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isuser_deptNull() {
                return this.IsNull(this.tableUserInfoDT.user_deptColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setuser_deptNull() {
                this[this.tableUserInfoDT.user_deptColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isuser_contactNull() {
                return this.IsNull(this.tableUserInfoDT.user_contactColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setuser_contactNull() {
                this[this.tableUserInfoDT.user_contactColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isuser_emailNull() {
                return this.IsNull(this.tableUserInfoDT.user_emailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setuser_emailNull() {
                this[this.tableUserInfoDT.user_emailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isuser_last_loginNull() {
                return this.IsNull(this.tableUserInfoDT.user_last_loginColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setuser_last_loginNull() {
                this[this.tableUserInfoDT.user_last_loginColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isuser_last_updateNull() {
                return this.IsNull(this.tableUserInfoDT.user_last_updateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setuser_last_updateNull() {
                this[this.tableUserInfoDT.user_last_updateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isdate_createdNull() {
                return this.IsNull(this.tableUserInfoDT.date_createdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setdate_createdNull() {
                this[this.tableUserInfoDT.date_createdColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class asset_mainDTRowChangeEvent : global::System.EventArgs {
            
            private asset_mainDTRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public asset_mainDTRowChangeEvent(asset_mainDTRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public asset_mainDTRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ReaderInfoDTRowChangeEvent : global::System.EventArgs {
            
            private ReaderInfoDTRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReaderInfoDTRowChangeEvent(ReaderInfoDTRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReaderInfoDTRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UserInfoDTRowChangeEvent : global::System.EventArgs {
            
            private UserInfoDTRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserInfoDTRowChangeEvent(UserInfoDTRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserInfoDTRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace ZTraka_App.ztATdbLocalDSReports1TableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class asset_mainDTTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public asset_mainDTTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "asset_mainDT";
            tableMapping.ColumnMappings.Add("asset_id", "asset_id");
            tableMapping.ColumnMappings.Add("tag_id", "tag_id");
            tableMapping.ColumnMappings.Add("asset_location", "asset_location");
            tableMapping.ColumnMappings.Add("asset_category", "asset_category");
            tableMapping.ColumnMappings.Add("asset_desc", "asset_desc");
            tableMapping.ColumnMappings.Add("asset_tag_created", "asset_tag_created");
            tableMapping.ColumnMappings.Add("asset_model", "asset_model");
            tableMapping.ColumnMappings.Add("asset_quantity", "asset_quantity");
            tableMapping.ColumnMappings.Add("asset_comments", "asset_comments");
            tableMapping.ColumnMappings.Add("asset_image", "asset_image");
            tableMapping.ColumnMappings.Add("asset_id1", "asset_id1");
            tableMapping.ColumnMappings.Add("tag_id1", "tag_id1");
            tableMapping.ColumnMappings.Add("asset_lastchecked", "asset_lastchecked");
            tableMapping.ColumnMappings.Add("asset_lastloc", "asset_lastloc");
            tableMapping.ColumnMappings.Add("asset_maint_due", "asset_maint_due");
            tableMapping.ColumnMappings.Add("tag_expiry", "tag_expiry");
            tableMapping.ColumnMappings.Add("asset_status", "asset_status");
            tableMapping.ColumnMappings.Add("asset_alarms", "asset_alarms");
            tableMapping.ColumnMappings.Add("asset_value", "asset_value");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ZTraka_App.Properties.Settings.Default.ztATdbLocalConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT * \r\nFROM asset_main INNER JOIN asset_stat \r\nON asset_main.asset_id = asset" +
                "_stat.asset_id";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT * \r\nFROM asset_main INNER JOIN asset_stat \r\nON asset_main.asset_id = asset" +
                "_stat.asset_id \r\nWHERE ([asset_maint_due] BETWEEN @maintLDate AND @maintHDate) O" +
                "R \r\n\t\t([tag_expiry] BETWEEN @texpiryLDate AND @texpiryHDate)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@maintLDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "asset_maint_due", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@maintHDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "asset_maint_due", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@texpiryLDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "tag_expiry", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@texpiryHDate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "tag_expiry", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int FillA(ztATdbLocalDSReports1.asset_mainDTDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillAlertDateRecords(ztATdbLocalDSReports1.asset_mainDTDataTable dataTable, global::System.Nullable<global::System.DateTime> maintLDate, global::System.Nullable<global::System.DateTime> maintHDate, global::System.Nullable<global::System.DateTime> texpiryLDate, global::System.Nullable<global::System.DateTime> texpiryHDate) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((maintLDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((System.DateTime)(maintLDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            if ((maintHDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[1].Value = ((System.DateTime)(maintHDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((texpiryLDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[2].Value = ((System.DateTime)(texpiryLDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((texpiryHDate.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[3].Value = ((System.DateTime)(texpiryHDate.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ReaderInfoDTTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ReaderInfoDTTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ReaderInfoDT";
            tableMapping.ColumnMappings.Add("reader_id", "reader_id");
            tableMapping.ColumnMappings.Add("location_id", "location_id");
            tableMapping.ColumnMappings.Add("floor_id", "floor_id");
            tableMapping.ColumnMappings.Add("map_floor", "map_floor");
            tableMapping.ColumnMappings.Add("asset_info", "asset_info");
            tableMapping.ColumnMappings.Add("reader_info", "reader_info");
            tableMapping.ColumnMappings.Add("floor_id1", "floor_id1");
            tableMapping.ColumnMappings.Add("map_floor1", "map_floor1");
            tableMapping.ColumnMappings.Add("rooms_pfloor", "rooms_pfloor");
            tableMapping.ColumnMappings.Add("assets_pfloor", "assets_pfloor");
            tableMapping.ColumnMappings.Add("map_comments", "map_comments");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ZTraka_App.Properties.Settings.Default.ztATdbLocalConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT * \r\nFROM [reader] INNER JOIN [map] \r\nON reader.floor_id = map.floor_id";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int FillR(ztATdbLocalDSReports1.ReaderInfoDTDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class UserInfoDTTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UserInfoDTTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "UserInfoDT";
            tableMapping.ColumnMappings.Add("user_id", "user_id");
            tableMapping.ColumnMappings.Add("user_name", "user_name");
            tableMapping.ColumnMappings.Add("user_pass", "user_pass");
            tableMapping.ColumnMappings.Add("user_role", "user_role");
            tableMapping.ColumnMappings.Add("user_dept", "user_dept");
            tableMapping.ColumnMappings.Add("user_contact", "user_contact");
            tableMapping.ColumnMappings.Add("user_email", "user_email");
            tableMapping.ColumnMappings.Add("user_roleid", "user_roleid");
            tableMapping.ColumnMappings.Add("user_last_login", "user_last_login");
            tableMapping.ColumnMappings.Add("user_last_update", "user_last_update");
            tableMapping.ColumnMappings.Add("user_id1", "user_id1");
            tableMapping.ColumnMappings.Add("user_roleid1", "user_roleid1");
            tableMapping.ColumnMappings.Add("date_created", "date_created");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ZTraka_App.Properties.Settings.Default.ztATdbLocalConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT * \r\nFROM acl INNER JOIN acl_login \r\nON acl.user_id = acl_login.user_id";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int FillU(ztATdbLocalDSReports1.UserInfoDTDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(ztATdbLocalDSReports1 dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(ztATdbLocalDSReports1 dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(ztATdbLocalDSReports1 dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(ztATdbLocalDSReports1 dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591