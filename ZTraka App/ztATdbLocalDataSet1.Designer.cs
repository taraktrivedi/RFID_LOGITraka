//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4234
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace ZTraka_App {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ztATdbLocalDataSet1")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ztATdbLocalDataSet1 : global::System.Data.DataSet {
        
        private AssetInfoDataTableDataTable tableAssetInfoDataTable;
        
        private assetInfoSearchDBDataTableDataTable tableassetInfoSearchDBDataTable;
        
        private UserInfoDataTableDataTable tableUserInfoDataTable;
        
        private UserIDDataTableDataTable tableUserIDDataTable;
        
        private readerInfoDataTableDataTable tablereaderInfoDataTable;
        
        private ChartingQueryDataTable tableChartingQuery;
        
        private global::System.Data.DataRelation relationFK_acl_login_acl;
        
        private global::System.Data.DataRelation relationFK_asset_stat_asset_main;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ztATdbLocalDataSet1() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ztATdbLocalDataSet1(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["AssetInfoDataTable"] != null)) {
                    base.Tables.Add(new AssetInfoDataTableDataTable(ds.Tables["AssetInfoDataTable"]));
                }
                if ((ds.Tables["assetInfoSearchDBDataTable"] != null)) {
                    base.Tables.Add(new assetInfoSearchDBDataTableDataTable(ds.Tables["assetInfoSearchDBDataTable"]));
                }
                if ((ds.Tables["UserInfoDataTable"] != null)) {
                    base.Tables.Add(new UserInfoDataTableDataTable(ds.Tables["UserInfoDataTable"]));
                }
                if ((ds.Tables["UserIDDataTable"] != null)) {
                    base.Tables.Add(new UserIDDataTableDataTable(ds.Tables["UserIDDataTable"]));
                }
                if ((ds.Tables["readerInfoDataTable"] != null)) {
                    base.Tables.Add(new readerInfoDataTableDataTable(ds.Tables["readerInfoDataTable"]));
                }
                if ((ds.Tables["ChartingQuery"] != null)) {
                    base.Tables.Add(new ChartingQueryDataTable(ds.Tables["ChartingQuery"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public AssetInfoDataTableDataTable AssetInfoDataTable {
            get {
                return this.tableAssetInfoDataTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public assetInfoSearchDBDataTableDataTable assetInfoSearchDBDataTable {
            get {
                return this.tableassetInfoSearchDBDataTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UserInfoDataTableDataTable UserInfoDataTable {
            get {
                return this.tableUserInfoDataTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UserIDDataTableDataTable UserIDDataTable {
            get {
                return this.tableUserIDDataTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public readerInfoDataTableDataTable readerInfoDataTable {
            get {
                return this.tablereaderInfoDataTable;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ChartingQueryDataTable ChartingQuery {
            get {
                return this.tableChartingQuery;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ztATdbLocalDataSet1 cln = ((ztATdbLocalDataSet1)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["AssetInfoDataTable"] != null)) {
                    base.Tables.Add(new AssetInfoDataTableDataTable(ds.Tables["AssetInfoDataTable"]));
                }
                if ((ds.Tables["assetInfoSearchDBDataTable"] != null)) {
                    base.Tables.Add(new assetInfoSearchDBDataTableDataTable(ds.Tables["assetInfoSearchDBDataTable"]));
                }
                if ((ds.Tables["UserInfoDataTable"] != null)) {
                    base.Tables.Add(new UserInfoDataTableDataTable(ds.Tables["UserInfoDataTable"]));
                }
                if ((ds.Tables["UserIDDataTable"] != null)) {
                    base.Tables.Add(new UserIDDataTableDataTable(ds.Tables["UserIDDataTable"]));
                }
                if ((ds.Tables["readerInfoDataTable"] != null)) {
                    base.Tables.Add(new readerInfoDataTableDataTable(ds.Tables["readerInfoDataTable"]));
                }
                if ((ds.Tables["ChartingQuery"] != null)) {
                    base.Tables.Add(new ChartingQueryDataTable(ds.Tables["ChartingQuery"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableAssetInfoDataTable = ((AssetInfoDataTableDataTable)(base.Tables["AssetInfoDataTable"]));
            if ((initTable == true)) {
                if ((this.tableAssetInfoDataTable != null)) {
                    this.tableAssetInfoDataTable.InitVars();
                }
            }
            this.tableassetInfoSearchDBDataTable = ((assetInfoSearchDBDataTableDataTable)(base.Tables["assetInfoSearchDBDataTable"]));
            if ((initTable == true)) {
                if ((this.tableassetInfoSearchDBDataTable != null)) {
                    this.tableassetInfoSearchDBDataTable.InitVars();
                }
            }
            this.tableUserInfoDataTable = ((UserInfoDataTableDataTable)(base.Tables["UserInfoDataTable"]));
            if ((initTable == true)) {
                if ((this.tableUserInfoDataTable != null)) {
                    this.tableUserInfoDataTable.InitVars();
                }
            }
            this.tableUserIDDataTable = ((UserIDDataTableDataTable)(base.Tables["UserIDDataTable"]));
            if ((initTable == true)) {
                if ((this.tableUserIDDataTable != null)) {
                    this.tableUserIDDataTable.InitVars();
                }
            }
            this.tablereaderInfoDataTable = ((readerInfoDataTableDataTable)(base.Tables["readerInfoDataTable"]));
            if ((initTable == true)) {
                if ((this.tablereaderInfoDataTable != null)) {
                    this.tablereaderInfoDataTable.InitVars();
                }
            }
            this.tableChartingQuery = ((ChartingQueryDataTable)(base.Tables["ChartingQuery"]));
            if ((initTable == true)) {
                if ((this.tableChartingQuery != null)) {
                    this.tableChartingQuery.InitVars();
                }
            }
            this.relationFK_acl_login_acl = this.Relations["FK_acl_login_acl"];
            this.relationFK_asset_stat_asset_main = this.Relations["FK_asset_stat_asset_main"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ztATdbLocalDataSet1";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ztATdbLocalDataSet1.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableAssetInfoDataTable = new AssetInfoDataTableDataTable();
            base.Tables.Add(this.tableAssetInfoDataTable);
            this.tableassetInfoSearchDBDataTable = new assetInfoSearchDBDataTableDataTable();
            base.Tables.Add(this.tableassetInfoSearchDBDataTable);
            this.tableUserInfoDataTable = new UserInfoDataTableDataTable();
            base.Tables.Add(this.tableUserInfoDataTable);
            this.tableUserIDDataTable = new UserIDDataTableDataTable();
            base.Tables.Add(this.tableUserIDDataTable);
            this.tablereaderInfoDataTable = new readerInfoDataTableDataTable();
            base.Tables.Add(this.tablereaderInfoDataTable);
            this.tableChartingQuery = new ChartingQueryDataTable();
            base.Tables.Add(this.tableChartingQuery);
            this.relationFK_acl_login_acl = new global::System.Data.DataRelation("FK_acl_login_acl", new global::System.Data.DataColumn[] {
                        this.tableUserIDDataTable.user_idColumn}, new global::System.Data.DataColumn[] {
                        this.tableUserInfoDataTable.user_idColumn}, false);
            this.Relations.Add(this.relationFK_acl_login_acl);
            this.relationFK_asset_stat_asset_main = new global::System.Data.DataRelation("FK_asset_stat_asset_main", new global::System.Data.DataColumn[] {
                        this.tableassetInfoSearchDBDataTable.asset_idColumn}, new global::System.Data.DataColumn[] {
                        this.tableAssetInfoDataTable.asset_idColumn}, false);
            this.Relations.Add(this.relationFK_asset_stat_asset_main);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeAssetInfoDataTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeassetInfoSearchDBDataTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUserInfoDataTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUserIDDataTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializereaderInfoDataTable() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeChartingQuery() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ztATdbLocalDataSet1 ds = new ztATdbLocalDataSet1();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void AssetInfoDataTableRowChangeEventHandler(object sender, AssetInfoDataTableRowChangeEvent e);
        
        public delegate void assetInfoSearchDBDataTableRowChangeEventHandler(object sender, assetInfoSearchDBDataTableRowChangeEvent e);
        
        public delegate void UserInfoDataTableRowChangeEventHandler(object sender, UserInfoDataTableRowChangeEvent e);
        
        public delegate void UserIDDataTableRowChangeEventHandler(object sender, UserIDDataTableRowChangeEvent e);
        
        public delegate void readerInfoDataTableRowChangeEventHandler(object sender, readerInfoDataTableRowChangeEvent e);
        
        public delegate void ChartingQueryRowChangeEventHandler(object sender, ChartingQueryRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class AssetInfoDataTableDataTable : global::System.Data.TypedTableBase<AssetInfoDataTableRow> {
            
            private global::System.Data.DataColumn columnasset_id;
            
            private global::System.Data.DataColumn columntag_id;
            
            private global::System.Data.DataColumn columnasset_location;
            
            private global::System.Data.DataColumn columnasset_category;
            
            private global::System.Data.DataColumn columnasset_desc;
            
            private global::System.Data.DataColumn columnasset_tag_created;
            
            private global::System.Data.DataColumn columnasset_model;
            
            private global::System.Data.DataColumn columnasset_lastchecked;
            
            private global::System.Data.DataColumn columnasset_lastloc;
            
            private global::System.Data.DataColumn columnasset_maint_due;
            
            private global::System.Data.DataColumn columntag_expiry;
            
            private global::System.Data.DataColumn columnasset_status;
            
            private global::System.Data.DataColumn columnasset_alarms;
            
            private global::System.Data.DataColumn columnasset_value;
            
            private global::System.Data.DataColumn columnasset_quantity;
            
            private global::System.Data.DataColumn columnasset_image;
            
            private global::System.Data.DataColumn columnasset_comments;
            
            private global::System.Data.DataColumn columnasset_id1;
            
            private global::System.Data.DataColumn columntag_id1;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AssetInfoDataTableDataTable() {
                this.TableName = "AssetInfoDataTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AssetInfoDataTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected AssetInfoDataTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn asset_idColumn {
                get {
                    return this.columnasset_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tag_idColumn {
                get {
                    return this.columntag_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn asset_locationColumn {
                get {
                    return this.columnasset_location;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn asset_categoryColumn {
                get {
                    return this.columnasset_category;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn asset_descColumn {
                get {
                    return this.columnasset_desc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn asset_tag_createdColumn {
                get {
                    return this.columnasset_tag_created;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn asset_modelColumn {
                get {
                    return this.columnasset_model;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn asset_lastcheckedColumn {
                get {
                    return this.columnasset_lastchecked;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn asset_lastlocColumn {
                get {
                    return this.columnasset_lastloc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn asset_maint_dueColumn {
                get {
                    return this.columnasset_maint_due;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tag_expiryColumn {
                get {
                    return this.columntag_expiry;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn asset_statusColumn {
                get {
                    return this.columnasset_status;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn asset_alarmsColumn {
                get {
                    return this.columnasset_alarms;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn asset_valueColumn {
                get {
                    return this.columnasset_value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn asset_quantityColumn {
                get {
                    return this.columnasset_quantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn asset_imageColumn {
                get {
                    return this.columnasset_image;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn asset_commentsColumn {
                get {
                    return this.columnasset_comments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn asset_id1Column {
                get {
                    return this.columnasset_id1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tag_id1Column {
                get {
                    return this.columntag_id1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AssetInfoDataTableRow this[int index] {
                get {
                    return ((AssetInfoDataTableRow)(this.Rows[index]));
                }
            }
            
            public event AssetInfoDataTableRowChangeEventHandler AssetInfoDataTableRowChanging;
            
            public event AssetInfoDataTableRowChangeEventHandler AssetInfoDataTableRowChanged;
            
            public event AssetInfoDataTableRowChangeEventHandler AssetInfoDataTableRowDeleting;
            
            public event AssetInfoDataTableRowChangeEventHandler AssetInfoDataTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddAssetInfoDataTableRow(AssetInfoDataTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AssetInfoDataTableRow AddAssetInfoDataTableRow(
                        assetInfoSearchDBDataTableRow parentassetInfoSearchDBDataTableRowByFK_asset_stat_asset_main, 
                        string tag_id, 
                        string asset_location, 
                        string asset_category, 
                        string asset_desc, 
                        System.DateTime asset_tag_created, 
                        string asset_model, 
                        System.DateTime asset_lastchecked, 
                        string asset_lastloc, 
                        System.DateTime asset_maint_due, 
                        System.DateTime tag_expiry, 
                        string asset_status, 
                        string asset_alarms, 
                        decimal asset_value, 
                        short asset_quantity, 
                        byte[] asset_image, 
                        string asset_comments, 
                        string asset_id1, 
                        string tag_id1) {
                AssetInfoDataTableRow rowAssetInfoDataTableRow = ((AssetInfoDataTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        tag_id,
                        asset_location,
                        asset_category,
                        asset_desc,
                        asset_tag_created,
                        asset_model,
                        asset_lastchecked,
                        asset_lastloc,
                        asset_maint_due,
                        tag_expiry,
                        asset_status,
                        asset_alarms,
                        asset_value,
                        asset_quantity,
                        asset_image,
                        asset_comments,
                        asset_id1,
                        tag_id1};
                if ((parentassetInfoSearchDBDataTableRowByFK_asset_stat_asset_main != null)) {
                    columnValuesArray[0] = parentassetInfoSearchDBDataTableRowByFK_asset_stat_asset_main[0];
                }
                rowAssetInfoDataTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowAssetInfoDataTableRow);
                return rowAssetInfoDataTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AssetInfoDataTableRow FindByasset_id(string asset_id) {
                return ((AssetInfoDataTableRow)(this.Rows.Find(new object[] {
                            asset_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                AssetInfoDataTableDataTable cln = ((AssetInfoDataTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new AssetInfoDataTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnasset_id = base.Columns["asset_id"];
                this.columntag_id = base.Columns["tag_id"];
                this.columnasset_location = base.Columns["asset_location"];
                this.columnasset_category = base.Columns["asset_category"];
                this.columnasset_desc = base.Columns["asset_desc"];
                this.columnasset_tag_created = base.Columns["asset_tag_created"];
                this.columnasset_model = base.Columns["asset_model"];
                this.columnasset_lastchecked = base.Columns["asset_lastchecked"];
                this.columnasset_lastloc = base.Columns["asset_lastloc"];
                this.columnasset_maint_due = base.Columns["asset_maint_due"];
                this.columntag_expiry = base.Columns["tag_expiry"];
                this.columnasset_status = base.Columns["asset_status"];
                this.columnasset_alarms = base.Columns["asset_alarms"];
                this.columnasset_value = base.Columns["asset_value"];
                this.columnasset_quantity = base.Columns["asset_quantity"];
                this.columnasset_image = base.Columns["asset_image"];
                this.columnasset_comments = base.Columns["asset_comments"];
                this.columnasset_id1 = base.Columns["asset_id1"];
                this.columntag_id1 = base.Columns["tag_id1"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnasset_id = new global::System.Data.DataColumn("asset_id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnasset_id);
                this.columntag_id = new global::System.Data.DataColumn("tag_id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntag_id);
                this.columnasset_location = new global::System.Data.DataColumn("asset_location", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnasset_location);
                this.columnasset_category = new global::System.Data.DataColumn("asset_category", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnasset_category);
                this.columnasset_desc = new global::System.Data.DataColumn("asset_desc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnasset_desc);
                this.columnasset_tag_created = new global::System.Data.DataColumn("asset_tag_created", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnasset_tag_created);
                this.columnasset_model = new global::System.Data.DataColumn("asset_model", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnasset_model);
                this.columnasset_lastchecked = new global::System.Data.DataColumn("asset_lastchecked", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnasset_lastchecked);
                this.columnasset_lastloc = new global::System.Data.DataColumn("asset_lastloc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnasset_lastloc);
                this.columnasset_maint_due = new global::System.Data.DataColumn("asset_maint_due", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnasset_maint_due);
                this.columntag_expiry = new global::System.Data.DataColumn("tag_expiry", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntag_expiry);
                this.columnasset_status = new global::System.Data.DataColumn("asset_status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnasset_status);
                this.columnasset_alarms = new global::System.Data.DataColumn("asset_alarms", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnasset_alarms);
                this.columnasset_value = new global::System.Data.DataColumn("asset_value", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnasset_value);
                this.columnasset_quantity = new global::System.Data.DataColumn("asset_quantity", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnasset_quantity);
                this.columnasset_image = new global::System.Data.DataColumn("asset_image", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnasset_image);
                this.columnasset_comments = new global::System.Data.DataColumn("asset_comments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnasset_comments);
                this.columnasset_id1 = new global::System.Data.DataColumn("asset_id1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnasset_id1);
                this.columntag_id1 = new global::System.Data.DataColumn("tag_id1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntag_id1);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnasset_id}, true));
                this.columnasset_id.AllowDBNull = false;
                this.columnasset_id.Unique = true;
                this.columnasset_id.MaxLength = 10;
                this.columntag_id.AllowDBNull = false;
                this.columntag_id.MaxLength = 10;
                this.columnasset_location.AllowDBNull = false;
                this.columnasset_location.MaxLength = 20;
                this.columnasset_category.AllowDBNull = false;
                this.columnasset_category.MaxLength = 10;
                this.columnasset_desc.AllowDBNull = false;
                this.columnasset_desc.MaxLength = 1073741823;
                this.columnasset_model.MaxLength = 10;
                this.columnasset_lastloc.MaxLength = 20;
                this.columnasset_status.AllowDBNull = false;
                this.columnasset_status.MaxLength = 15;
                this.columnasset_alarms.MaxLength = 10;
                this.columnasset_comments.MaxLength = 1073741823;
                this.columnasset_id1.AllowDBNull = false;
                this.columnasset_id1.MaxLength = 10;
                this.columntag_id1.AllowDBNull = false;
                this.columntag_id1.MaxLength = 10;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AssetInfoDataTableRow NewAssetInfoDataTableRow() {
                return ((AssetInfoDataTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new AssetInfoDataTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(AssetInfoDataTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.AssetInfoDataTableRowChanged != null)) {
                    this.AssetInfoDataTableRowChanged(this, new AssetInfoDataTableRowChangeEvent(((AssetInfoDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.AssetInfoDataTableRowChanging != null)) {
                    this.AssetInfoDataTableRowChanging(this, new AssetInfoDataTableRowChangeEvent(((AssetInfoDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.AssetInfoDataTableRowDeleted != null)) {
                    this.AssetInfoDataTableRowDeleted(this, new AssetInfoDataTableRowChangeEvent(((AssetInfoDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.AssetInfoDataTableRowDeleting != null)) {
                    this.AssetInfoDataTableRowDeleting(this, new AssetInfoDataTableRowChangeEvent(((AssetInfoDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveAssetInfoDataTableRow(AssetInfoDataTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ztATdbLocalDataSet1 ds = new ztATdbLocalDataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "AssetInfoDataTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class assetInfoSearchDBDataTableDataTable : global::System.Data.TypedTableBase<assetInfoSearchDBDataTableRow> {
            
            private global::System.Data.DataColumn columnasset_id;
            
            private global::System.Data.DataColumn columntag_id;
            
            private global::System.Data.DataColumn columnasset_location;
            
            private global::System.Data.DataColumn columnasset_category;
            
            private global::System.Data.DataColumn columnasset_desc;
            
            private global::System.Data.DataColumn columnasset_tag_created;
            
            private global::System.Data.DataColumn columnasset_model;
            
            private global::System.Data.DataColumn columnasset_quantity;
            
            private global::System.Data.DataColumn columnasset_image;
            
            private global::System.Data.DataColumn columnasset_comments;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public assetInfoSearchDBDataTableDataTable() {
                this.TableName = "assetInfoSearchDBDataTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal assetInfoSearchDBDataTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected assetInfoSearchDBDataTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn asset_idColumn {
                get {
                    return this.columnasset_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn tag_idColumn {
                get {
                    return this.columntag_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn asset_locationColumn {
                get {
                    return this.columnasset_location;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn asset_categoryColumn {
                get {
                    return this.columnasset_category;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn asset_descColumn {
                get {
                    return this.columnasset_desc;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn asset_tag_createdColumn {
                get {
                    return this.columnasset_tag_created;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn asset_modelColumn {
                get {
                    return this.columnasset_model;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn asset_quantityColumn {
                get {
                    return this.columnasset_quantity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn asset_imageColumn {
                get {
                    return this.columnasset_image;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn asset_commentsColumn {
                get {
                    return this.columnasset_comments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public assetInfoSearchDBDataTableRow this[int index] {
                get {
                    return ((assetInfoSearchDBDataTableRow)(this.Rows[index]));
                }
            }
            
            public event assetInfoSearchDBDataTableRowChangeEventHandler assetInfoSearchDBDataTableRowChanging;
            
            public event assetInfoSearchDBDataTableRowChangeEventHandler assetInfoSearchDBDataTableRowChanged;
            
            public event assetInfoSearchDBDataTableRowChangeEventHandler assetInfoSearchDBDataTableRowDeleting;
            
            public event assetInfoSearchDBDataTableRowChangeEventHandler assetInfoSearchDBDataTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddassetInfoSearchDBDataTableRow(assetInfoSearchDBDataTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public assetInfoSearchDBDataTableRow AddassetInfoSearchDBDataTableRow(string asset_id, string tag_id, string asset_location, string asset_category, string asset_desc, System.DateTime asset_tag_created, string asset_model, short asset_quantity, byte[] asset_image, string asset_comments) {
                assetInfoSearchDBDataTableRow rowassetInfoSearchDBDataTableRow = ((assetInfoSearchDBDataTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        asset_id,
                        tag_id,
                        asset_location,
                        asset_category,
                        asset_desc,
                        asset_tag_created,
                        asset_model,
                        asset_quantity,
                        asset_image,
                        asset_comments};
                rowassetInfoSearchDBDataTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowassetInfoSearchDBDataTableRow);
                return rowassetInfoSearchDBDataTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public assetInfoSearchDBDataTableRow FindByasset_id(string asset_id) {
                return ((assetInfoSearchDBDataTableRow)(this.Rows.Find(new object[] {
                            asset_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                assetInfoSearchDBDataTableDataTable cln = ((assetInfoSearchDBDataTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new assetInfoSearchDBDataTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnasset_id = base.Columns["asset_id"];
                this.columntag_id = base.Columns["tag_id"];
                this.columnasset_location = base.Columns["asset_location"];
                this.columnasset_category = base.Columns["asset_category"];
                this.columnasset_desc = base.Columns["asset_desc"];
                this.columnasset_tag_created = base.Columns["asset_tag_created"];
                this.columnasset_model = base.Columns["asset_model"];
                this.columnasset_quantity = base.Columns["asset_quantity"];
                this.columnasset_image = base.Columns["asset_image"];
                this.columnasset_comments = base.Columns["asset_comments"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnasset_id = new global::System.Data.DataColumn("asset_id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnasset_id);
                this.columntag_id = new global::System.Data.DataColumn("tag_id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columntag_id);
                this.columnasset_location = new global::System.Data.DataColumn("asset_location", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnasset_location);
                this.columnasset_category = new global::System.Data.DataColumn("asset_category", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnasset_category);
                this.columnasset_desc = new global::System.Data.DataColumn("asset_desc", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnasset_desc);
                this.columnasset_tag_created = new global::System.Data.DataColumn("asset_tag_created", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnasset_tag_created);
                this.columnasset_model = new global::System.Data.DataColumn("asset_model", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnasset_model);
                this.columnasset_quantity = new global::System.Data.DataColumn("asset_quantity", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnasset_quantity);
                this.columnasset_image = new global::System.Data.DataColumn("asset_image", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnasset_image);
                this.columnasset_comments = new global::System.Data.DataColumn("asset_comments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnasset_comments);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnasset_id}, true));
                this.columnasset_id.AllowDBNull = false;
                this.columnasset_id.Unique = true;
                this.columnasset_id.MaxLength = 10;
                this.columntag_id.AllowDBNull = false;
                this.columntag_id.MaxLength = 10;
                this.columnasset_location.AllowDBNull = false;
                this.columnasset_location.MaxLength = 20;
                this.columnasset_category.AllowDBNull = false;
                this.columnasset_category.MaxLength = 10;
                this.columnasset_desc.AllowDBNull = false;
                this.columnasset_desc.MaxLength = 1073741823;
                this.columnasset_model.MaxLength = 10;
                this.columnasset_comments.MaxLength = 1073741823;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public assetInfoSearchDBDataTableRow NewassetInfoSearchDBDataTableRow() {
                return ((assetInfoSearchDBDataTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new assetInfoSearchDBDataTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(assetInfoSearchDBDataTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.assetInfoSearchDBDataTableRowChanged != null)) {
                    this.assetInfoSearchDBDataTableRowChanged(this, new assetInfoSearchDBDataTableRowChangeEvent(((assetInfoSearchDBDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.assetInfoSearchDBDataTableRowChanging != null)) {
                    this.assetInfoSearchDBDataTableRowChanging(this, new assetInfoSearchDBDataTableRowChangeEvent(((assetInfoSearchDBDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.assetInfoSearchDBDataTableRowDeleted != null)) {
                    this.assetInfoSearchDBDataTableRowDeleted(this, new assetInfoSearchDBDataTableRowChangeEvent(((assetInfoSearchDBDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.assetInfoSearchDBDataTableRowDeleting != null)) {
                    this.assetInfoSearchDBDataTableRowDeleting(this, new assetInfoSearchDBDataTableRowChangeEvent(((assetInfoSearchDBDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveassetInfoSearchDBDataTableRow(assetInfoSearchDBDataTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ztATdbLocalDataSet1 ds = new ztATdbLocalDataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "assetInfoSearchDBDataTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UserInfoDataTableDataTable : global::System.Data.TypedTableBase<UserInfoDataTableRow> {
            
            private global::System.Data.DataColumn columnuser_id;
            
            private global::System.Data.DataColumn columnuser_name;
            
            private global::System.Data.DataColumn columnuser_pass;
            
            private global::System.Data.DataColumn columnuser_role;
            
            private global::System.Data.DataColumn columnuser_dept;
            
            private global::System.Data.DataColumn columnuser_contact;
            
            private global::System.Data.DataColumn columnuser_email;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserInfoDataTableDataTable() {
                this.TableName = "UserInfoDataTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UserInfoDataTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UserInfoDataTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn user_idColumn {
                get {
                    return this.columnuser_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn user_nameColumn {
                get {
                    return this.columnuser_name;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn user_passColumn {
                get {
                    return this.columnuser_pass;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn user_roleColumn {
                get {
                    return this.columnuser_role;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn user_deptColumn {
                get {
                    return this.columnuser_dept;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn user_contactColumn {
                get {
                    return this.columnuser_contact;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn user_emailColumn {
                get {
                    return this.columnuser_email;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserInfoDataTableRow this[int index] {
                get {
                    return ((UserInfoDataTableRow)(this.Rows[index]));
                }
            }
            
            public event UserInfoDataTableRowChangeEventHandler UserInfoDataTableRowChanging;
            
            public event UserInfoDataTableRowChangeEventHandler UserInfoDataTableRowChanged;
            
            public event UserInfoDataTableRowChangeEventHandler UserInfoDataTableRowDeleting;
            
            public event UserInfoDataTableRowChangeEventHandler UserInfoDataTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUserInfoDataTableRow(UserInfoDataTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserInfoDataTableRow AddUserInfoDataTableRow(UserIDDataTableRow parentUserIDDataTableRowByFK_acl_login_acl, string user_name, string user_pass, string user_role, string user_dept, string user_contact, string user_email) {
                UserInfoDataTableRow rowUserInfoDataTableRow = ((UserInfoDataTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        user_name,
                        user_pass,
                        user_role,
                        user_dept,
                        user_contact,
                        user_email};
                if ((parentUserIDDataTableRowByFK_acl_login_acl != null)) {
                    columnValuesArray[0] = parentUserIDDataTableRowByFK_acl_login_acl[0];
                }
                rowUserInfoDataTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUserInfoDataTableRow);
                return rowUserInfoDataTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserInfoDataTableRow FindByuser_id(string user_id) {
                return ((UserInfoDataTableRow)(this.Rows.Find(new object[] {
                            user_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                UserInfoDataTableDataTable cln = ((UserInfoDataTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new UserInfoDataTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnuser_id = base.Columns["user_id"];
                this.columnuser_name = base.Columns["user_name"];
                this.columnuser_pass = base.Columns["user_pass"];
                this.columnuser_role = base.Columns["user_role"];
                this.columnuser_dept = base.Columns["user_dept"];
                this.columnuser_contact = base.Columns["user_contact"];
                this.columnuser_email = base.Columns["user_email"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnuser_id = new global::System.Data.DataColumn("user_id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuser_id);
                this.columnuser_name = new global::System.Data.DataColumn("user_name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuser_name);
                this.columnuser_pass = new global::System.Data.DataColumn("user_pass", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuser_pass);
                this.columnuser_role = new global::System.Data.DataColumn("user_role", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuser_role);
                this.columnuser_dept = new global::System.Data.DataColumn("user_dept", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuser_dept);
                this.columnuser_contact = new global::System.Data.DataColumn("user_contact", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuser_contact);
                this.columnuser_email = new global::System.Data.DataColumn("user_email", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuser_email);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnuser_id}, true));
                this.columnuser_id.AllowDBNull = false;
                this.columnuser_id.Unique = true;
                this.columnuser_id.MaxLength = 10;
                this.columnuser_name.AllowDBNull = false;
                this.columnuser_name.MaxLength = 25;
                this.columnuser_pass.AllowDBNull = false;
                this.columnuser_pass.MaxLength = 40;
                this.columnuser_role.AllowDBNull = false;
                this.columnuser_role.MaxLength = 10;
                this.columnuser_dept.MaxLength = 10;
                this.columnuser_contact.MaxLength = 50;
                this.columnuser_email.MaxLength = 30;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserInfoDataTableRow NewUserInfoDataTableRow() {
                return ((UserInfoDataTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new UserInfoDataTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(UserInfoDataTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UserInfoDataTableRowChanged != null)) {
                    this.UserInfoDataTableRowChanged(this, new UserInfoDataTableRowChangeEvent(((UserInfoDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UserInfoDataTableRowChanging != null)) {
                    this.UserInfoDataTableRowChanging(this, new UserInfoDataTableRowChangeEvent(((UserInfoDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UserInfoDataTableRowDeleted != null)) {
                    this.UserInfoDataTableRowDeleted(this, new UserInfoDataTableRowChangeEvent(((UserInfoDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UserInfoDataTableRowDeleting != null)) {
                    this.UserInfoDataTableRowDeleting(this, new UserInfoDataTableRowChangeEvent(((UserInfoDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUserInfoDataTableRow(UserInfoDataTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ztATdbLocalDataSet1 ds = new ztATdbLocalDataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UserInfoDataTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UserIDDataTableDataTable : global::System.Data.TypedTableBase<UserIDDataTableRow> {
            
            private global::System.Data.DataColumn columnuser_id;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserIDDataTableDataTable() {
                this.TableName = "UserIDDataTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UserIDDataTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UserIDDataTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn user_idColumn {
                get {
                    return this.columnuser_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserIDDataTableRow this[int index] {
                get {
                    return ((UserIDDataTableRow)(this.Rows[index]));
                }
            }
            
            public event UserIDDataTableRowChangeEventHandler UserIDDataTableRowChanging;
            
            public event UserIDDataTableRowChangeEventHandler UserIDDataTableRowChanged;
            
            public event UserIDDataTableRowChangeEventHandler UserIDDataTableRowDeleting;
            
            public event UserIDDataTableRowChangeEventHandler UserIDDataTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUserIDDataTableRow(UserIDDataTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserIDDataTableRow AddUserIDDataTableRow(string user_id) {
                UserIDDataTableRow rowUserIDDataTableRow = ((UserIDDataTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        user_id};
                rowUserIDDataTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUserIDDataTableRow);
                return rowUserIDDataTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserIDDataTableRow FindByuser_id(string user_id) {
                return ((UserIDDataTableRow)(this.Rows.Find(new object[] {
                            user_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                UserIDDataTableDataTable cln = ((UserIDDataTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new UserIDDataTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnuser_id = base.Columns["user_id"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnuser_id = new global::System.Data.DataColumn("user_id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnuser_id);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnuser_id}, true));
                this.columnuser_id.AllowDBNull = false;
                this.columnuser_id.Unique = true;
                this.columnuser_id.MaxLength = 10;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserIDDataTableRow NewUserIDDataTableRow() {
                return ((UserIDDataTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new UserIDDataTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(UserIDDataTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UserIDDataTableRowChanged != null)) {
                    this.UserIDDataTableRowChanged(this, new UserIDDataTableRowChangeEvent(((UserIDDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UserIDDataTableRowChanging != null)) {
                    this.UserIDDataTableRowChanging(this, new UserIDDataTableRowChangeEvent(((UserIDDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UserIDDataTableRowDeleted != null)) {
                    this.UserIDDataTableRowDeleted(this, new UserIDDataTableRowChangeEvent(((UserIDDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UserIDDataTableRowDeleting != null)) {
                    this.UserIDDataTableRowDeleting(this, new UserIDDataTableRowChangeEvent(((UserIDDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUserIDDataTableRow(UserIDDataTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ztATdbLocalDataSet1 ds = new ztATdbLocalDataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UserIDDataTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class readerInfoDataTableDataTable : global::System.Data.TypedTableBase<readerInfoDataTableRow> {
            
            private global::System.Data.DataColumn columnreader_id;
            
            private global::System.Data.DataColumn columnlocation_id;
            
            private global::System.Data.DataColumn columnmap_floor;
            
            private global::System.Data.DataColumn columnasset_info;
            
            private global::System.Data.DataColumn columnreader_info;
            
            private global::System.Data.DataColumn columnfloor_id;
            
            private global::System.Data.DataColumn columnfloor_id1;
            
            private global::System.Data.DataColumn columnmap_floor1;
            
            private global::System.Data.DataColumn columnrooms_pfloor;
            
            private global::System.Data.DataColumn columnassets_pfloor;
            
            private global::System.Data.DataColumn columnmap_comments;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public readerInfoDataTableDataTable() {
                this.TableName = "readerInfoDataTable";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal readerInfoDataTableDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected readerInfoDataTableDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn reader_idColumn {
                get {
                    return this.columnreader_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn location_idColumn {
                get {
                    return this.columnlocation_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn map_floorColumn {
                get {
                    return this.columnmap_floor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn asset_infoColumn {
                get {
                    return this.columnasset_info;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn reader_infoColumn {
                get {
                    return this.columnreader_info;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn floor_idColumn {
                get {
                    return this.columnfloor_id;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn floor_id1Column {
                get {
                    return this.columnfloor_id1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn map_floor1Column {
                get {
                    return this.columnmap_floor1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn rooms_pfloorColumn {
                get {
                    return this.columnrooms_pfloor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn assets_pfloorColumn {
                get {
                    return this.columnassets_pfloor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn map_commentsColumn {
                get {
                    return this.columnmap_comments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public readerInfoDataTableRow this[int index] {
                get {
                    return ((readerInfoDataTableRow)(this.Rows[index]));
                }
            }
            
            public event readerInfoDataTableRowChangeEventHandler readerInfoDataTableRowChanging;
            
            public event readerInfoDataTableRowChangeEventHandler readerInfoDataTableRowChanged;
            
            public event readerInfoDataTableRowChangeEventHandler readerInfoDataTableRowDeleting;
            
            public event readerInfoDataTableRowChangeEventHandler readerInfoDataTableRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddreaderInfoDataTableRow(readerInfoDataTableRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public readerInfoDataTableRow AddreaderInfoDataTableRow(string reader_id, string location_id, string map_floor, string asset_info, string reader_info, string floor_id, string floor_id1, string map_floor1, short rooms_pfloor, short assets_pfloor, string map_comments) {
                readerInfoDataTableRow rowreaderInfoDataTableRow = ((readerInfoDataTableRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        reader_id,
                        location_id,
                        map_floor,
                        asset_info,
                        reader_info,
                        floor_id,
                        floor_id1,
                        map_floor1,
                        rooms_pfloor,
                        assets_pfloor,
                        map_comments};
                rowreaderInfoDataTableRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowreaderInfoDataTableRow);
                return rowreaderInfoDataTableRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public readerInfoDataTableRow FindByreader_id(string reader_id) {
                return ((readerInfoDataTableRow)(this.Rows.Find(new object[] {
                            reader_id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                readerInfoDataTableDataTable cln = ((readerInfoDataTableDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new readerInfoDataTableDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnreader_id = base.Columns["reader_id"];
                this.columnlocation_id = base.Columns["location_id"];
                this.columnmap_floor = base.Columns["map_floor"];
                this.columnasset_info = base.Columns["asset_info"];
                this.columnreader_info = base.Columns["reader_info"];
                this.columnfloor_id = base.Columns["floor_id"];
                this.columnfloor_id1 = base.Columns["floor_id1"];
                this.columnmap_floor1 = base.Columns["map_floor1"];
                this.columnrooms_pfloor = base.Columns["rooms_pfloor"];
                this.columnassets_pfloor = base.Columns["assets_pfloor"];
                this.columnmap_comments = base.Columns["map_comments"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnreader_id = new global::System.Data.DataColumn("reader_id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreader_id);
                this.columnlocation_id = new global::System.Data.DataColumn("location_id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnlocation_id);
                this.columnmap_floor = new global::System.Data.DataColumn("map_floor", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmap_floor);
                this.columnasset_info = new global::System.Data.DataColumn("asset_info", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnasset_info);
                this.columnreader_info = new global::System.Data.DataColumn("reader_info", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnreader_info);
                this.columnfloor_id = new global::System.Data.DataColumn("floor_id", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfloor_id);
                this.columnfloor_id1 = new global::System.Data.DataColumn("floor_id1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnfloor_id1);
                this.columnmap_floor1 = new global::System.Data.DataColumn("map_floor1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmap_floor1);
                this.columnrooms_pfloor = new global::System.Data.DataColumn("rooms_pfloor", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrooms_pfloor);
                this.columnassets_pfloor = new global::System.Data.DataColumn("assets_pfloor", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnassets_pfloor);
                this.columnmap_comments = new global::System.Data.DataColumn("map_comments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnmap_comments);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnreader_id}, true));
                this.columnreader_id.AllowDBNull = false;
                this.columnreader_id.Unique = true;
                this.columnreader_id.MaxLength = 10;
                this.columnlocation_id.AllowDBNull = false;
                this.columnlocation_id.MaxLength = 10;
                this.columnmap_floor.MaxLength = 10;
                this.columnasset_info.MaxLength = 10;
                this.columnreader_info.MaxLength = 1073741823;
                this.columnfloor_id.AllowDBNull = false;
                this.columnfloor_id.MaxLength = 10;
                this.columnfloor_id1.AllowDBNull = false;
                this.columnfloor_id1.MaxLength = 10;
                this.columnmap_floor1.AllowDBNull = false;
                this.columnmap_floor1.MaxLength = 10;
                this.columnmap_comments.MaxLength = 1073741823;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public readerInfoDataTableRow NewreaderInfoDataTableRow() {
                return ((readerInfoDataTableRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new readerInfoDataTableRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(readerInfoDataTableRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.readerInfoDataTableRowChanged != null)) {
                    this.readerInfoDataTableRowChanged(this, new readerInfoDataTableRowChangeEvent(((readerInfoDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.readerInfoDataTableRowChanging != null)) {
                    this.readerInfoDataTableRowChanging(this, new readerInfoDataTableRowChangeEvent(((readerInfoDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.readerInfoDataTableRowDeleted != null)) {
                    this.readerInfoDataTableRowDeleted(this, new readerInfoDataTableRowChangeEvent(((readerInfoDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.readerInfoDataTableRowDeleting != null)) {
                    this.readerInfoDataTableRowDeleting(this, new readerInfoDataTableRowChangeEvent(((readerInfoDataTableRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovereaderInfoDataTableRow(readerInfoDataTableRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ztATdbLocalDataSet1 ds = new ztATdbLocalDataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "readerInfoDataTableDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ChartingQueryDataTable : global::System.Data.TypedTableBase<ChartingQueryRow> {
            
            private global::System.Data.DataColumn columnaType;
            
            private global::System.Data.DataColumn columnaCount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChartingQueryDataTable() {
                this.TableName = "ChartingQuery";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ChartingQueryDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ChartingQueryDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn aTypeColumn {
                get {
                    return this.columnaType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn aCountColumn {
                get {
                    return this.columnaCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChartingQueryRow this[int index] {
                get {
                    return ((ChartingQueryRow)(this.Rows[index]));
                }
            }
            
            public event ChartingQueryRowChangeEventHandler ChartingQueryRowChanging;
            
            public event ChartingQueryRowChangeEventHandler ChartingQueryRowChanged;
            
            public event ChartingQueryRowChangeEventHandler ChartingQueryRowDeleting;
            
            public event ChartingQueryRowChangeEventHandler ChartingQueryRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddChartingQueryRow(ChartingQueryRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChartingQueryRow AddChartingQueryRow(string aType, int aCount) {
                ChartingQueryRow rowChartingQueryRow = ((ChartingQueryRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        aType,
                        aCount};
                rowChartingQueryRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowChartingQueryRow);
                return rowChartingQueryRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ChartingQueryDataTable cln = ((ChartingQueryDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ChartingQueryDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnaType = base.Columns["aType"];
                this.columnaCount = base.Columns["aCount"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnaType = new global::System.Data.DataColumn("aType", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaType);
                this.columnaCount = new global::System.Data.DataColumn("aCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnaCount);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnaType}, false));
                this.columnaType.AllowDBNull = false;
                this.columnaType.Unique = true;
                this.columnaType.MaxLength = 30;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChartingQueryRow NewChartingQueryRow() {
                return ((ChartingQueryRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ChartingQueryRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ChartingQueryRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ChartingQueryRowChanged != null)) {
                    this.ChartingQueryRowChanged(this, new ChartingQueryRowChangeEvent(((ChartingQueryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ChartingQueryRowChanging != null)) {
                    this.ChartingQueryRowChanging(this, new ChartingQueryRowChangeEvent(((ChartingQueryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ChartingQueryRowDeleted != null)) {
                    this.ChartingQueryRowDeleted(this, new ChartingQueryRowChangeEvent(((ChartingQueryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ChartingQueryRowDeleting != null)) {
                    this.ChartingQueryRowDeleting(this, new ChartingQueryRowChangeEvent(((ChartingQueryRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveChartingQueryRow(ChartingQueryRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ztATdbLocalDataSet1 ds = new ztATdbLocalDataSet1();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ChartingQueryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class AssetInfoDataTableRow : global::System.Data.DataRow {
            
            private AssetInfoDataTableDataTable tableAssetInfoDataTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal AssetInfoDataTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableAssetInfoDataTable = ((AssetInfoDataTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string asset_id {
                get {
                    return ((string)(this[this.tableAssetInfoDataTable.asset_idColumn]));
                }
                set {
                    this[this.tableAssetInfoDataTable.asset_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tag_id {
                get {
                    return ((string)(this[this.tableAssetInfoDataTable.tag_idColumn]));
                }
                set {
                    this[this.tableAssetInfoDataTable.tag_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string asset_location {
                get {
                    return ((string)(this[this.tableAssetInfoDataTable.asset_locationColumn]));
                }
                set {
                    this[this.tableAssetInfoDataTable.asset_locationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string asset_category {
                get {
                    return ((string)(this[this.tableAssetInfoDataTable.asset_categoryColumn]));
                }
                set {
                    this[this.tableAssetInfoDataTable.asset_categoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string asset_desc {
                get {
                    return ((string)(this[this.tableAssetInfoDataTable.asset_descColumn]));
                }
                set {
                    this[this.tableAssetInfoDataTable.asset_descColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime asset_tag_created {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableAssetInfoDataTable.asset_tag_createdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'asset_tag_created\' in table \'AssetInfoDataTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableAssetInfoDataTable.asset_tag_createdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string asset_model {
                get {
                    try {
                        return ((string)(this[this.tableAssetInfoDataTable.asset_modelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'asset_model\' in table \'AssetInfoDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAssetInfoDataTable.asset_modelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime asset_lastchecked {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableAssetInfoDataTable.asset_lastcheckedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'asset_lastchecked\' in table \'AssetInfoDataTable\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableAssetInfoDataTable.asset_lastcheckedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string asset_lastloc {
                get {
                    try {
                        return ((string)(this[this.tableAssetInfoDataTable.asset_lastlocColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'asset_lastloc\' in table \'AssetInfoDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAssetInfoDataTable.asset_lastlocColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime asset_maint_due {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableAssetInfoDataTable.asset_maint_dueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'asset_maint_due\' in table \'AssetInfoDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAssetInfoDataTable.asset_maint_dueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime tag_expiry {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableAssetInfoDataTable.tag_expiryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'tag_expiry\' in table \'AssetInfoDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAssetInfoDataTable.tag_expiryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string asset_status {
                get {
                    return ((string)(this[this.tableAssetInfoDataTable.asset_statusColumn]));
                }
                set {
                    this[this.tableAssetInfoDataTable.asset_statusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string asset_alarms {
                get {
                    try {
                        return ((string)(this[this.tableAssetInfoDataTable.asset_alarmsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'asset_alarms\' in table \'AssetInfoDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAssetInfoDataTable.asset_alarmsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal asset_value {
                get {
                    try {
                        return ((decimal)(this[this.tableAssetInfoDataTable.asset_valueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'asset_value\' in table \'AssetInfoDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAssetInfoDataTable.asset_valueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short asset_quantity {
                get {
                    try {
                        return ((short)(this[this.tableAssetInfoDataTable.asset_quantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'asset_quantity\' in table \'AssetInfoDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAssetInfoDataTable.asset_quantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] asset_image {
                get {
                    try {
                        return ((byte[])(this[this.tableAssetInfoDataTable.asset_imageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'asset_image\' in table \'AssetInfoDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAssetInfoDataTable.asset_imageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string asset_comments {
                get {
                    try {
                        return ((string)(this[this.tableAssetInfoDataTable.asset_commentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'asset_comments\' in table \'AssetInfoDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableAssetInfoDataTable.asset_commentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string asset_id1 {
                get {
                    return ((string)(this[this.tableAssetInfoDataTable.asset_id1Column]));
                }
                set {
                    this[this.tableAssetInfoDataTable.asset_id1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tag_id1 {
                get {
                    return ((string)(this[this.tableAssetInfoDataTable.tag_id1Column]));
                }
                set {
                    this[this.tableAssetInfoDataTable.tag_id1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public assetInfoSearchDBDataTableRow assetInfoSearchDBDataTableRow {
                get {
                    return ((assetInfoSearchDBDataTableRow)(this.GetParentRow(this.Table.ParentRelations["FK_asset_stat_asset_main"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_asset_stat_asset_main"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isasset_tag_createdNull() {
                return this.IsNull(this.tableAssetInfoDataTable.asset_tag_createdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setasset_tag_createdNull() {
                this[this.tableAssetInfoDataTable.asset_tag_createdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isasset_modelNull() {
                return this.IsNull(this.tableAssetInfoDataTable.asset_modelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setasset_modelNull() {
                this[this.tableAssetInfoDataTable.asset_modelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isasset_lastcheckedNull() {
                return this.IsNull(this.tableAssetInfoDataTable.asset_lastcheckedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setasset_lastcheckedNull() {
                this[this.tableAssetInfoDataTable.asset_lastcheckedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isasset_lastlocNull() {
                return this.IsNull(this.tableAssetInfoDataTable.asset_lastlocColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setasset_lastlocNull() {
                this[this.tableAssetInfoDataTable.asset_lastlocColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isasset_maint_dueNull() {
                return this.IsNull(this.tableAssetInfoDataTable.asset_maint_dueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setasset_maint_dueNull() {
                this[this.tableAssetInfoDataTable.asset_maint_dueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istag_expiryNull() {
                return this.IsNull(this.tableAssetInfoDataTable.tag_expiryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settag_expiryNull() {
                this[this.tableAssetInfoDataTable.tag_expiryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isasset_alarmsNull() {
                return this.IsNull(this.tableAssetInfoDataTable.asset_alarmsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setasset_alarmsNull() {
                this[this.tableAssetInfoDataTable.asset_alarmsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isasset_valueNull() {
                return this.IsNull(this.tableAssetInfoDataTable.asset_valueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setasset_valueNull() {
                this[this.tableAssetInfoDataTable.asset_valueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isasset_quantityNull() {
                return this.IsNull(this.tableAssetInfoDataTable.asset_quantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setasset_quantityNull() {
                this[this.tableAssetInfoDataTable.asset_quantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isasset_imageNull() {
                return this.IsNull(this.tableAssetInfoDataTable.asset_imageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setasset_imageNull() {
                this[this.tableAssetInfoDataTable.asset_imageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isasset_commentsNull() {
                return this.IsNull(this.tableAssetInfoDataTable.asset_commentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setasset_commentsNull() {
                this[this.tableAssetInfoDataTable.asset_commentsColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class assetInfoSearchDBDataTableRow : global::System.Data.DataRow {
            
            private assetInfoSearchDBDataTableDataTable tableassetInfoSearchDBDataTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal assetInfoSearchDBDataTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableassetInfoSearchDBDataTable = ((assetInfoSearchDBDataTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string asset_id {
                get {
                    return ((string)(this[this.tableassetInfoSearchDBDataTable.asset_idColumn]));
                }
                set {
                    this[this.tableassetInfoSearchDBDataTable.asset_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tag_id {
                get {
                    return ((string)(this[this.tableassetInfoSearchDBDataTable.tag_idColumn]));
                }
                set {
                    this[this.tableassetInfoSearchDBDataTable.tag_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string asset_location {
                get {
                    return ((string)(this[this.tableassetInfoSearchDBDataTable.asset_locationColumn]));
                }
                set {
                    this[this.tableassetInfoSearchDBDataTable.asset_locationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string asset_category {
                get {
                    return ((string)(this[this.tableassetInfoSearchDBDataTable.asset_categoryColumn]));
                }
                set {
                    this[this.tableassetInfoSearchDBDataTable.asset_categoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string asset_desc {
                get {
                    return ((string)(this[this.tableassetInfoSearchDBDataTable.asset_descColumn]));
                }
                set {
                    this[this.tableassetInfoSearchDBDataTable.asset_descColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime asset_tag_created {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableassetInfoSearchDBDataTable.asset_tag_createdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'asset_tag_created\' in table \'assetInfoSearchDBDataTable\' is" +
                                " DBNull.", e);
                    }
                }
                set {
                    this[this.tableassetInfoSearchDBDataTable.asset_tag_createdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string asset_model {
                get {
                    try {
                        return ((string)(this[this.tableassetInfoSearchDBDataTable.asset_modelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'asset_model\' in table \'assetInfoSearchDBDataTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableassetInfoSearchDBDataTable.asset_modelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short asset_quantity {
                get {
                    try {
                        return ((short)(this[this.tableassetInfoSearchDBDataTable.asset_quantityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'asset_quantity\' in table \'assetInfoSearchDBDataTable\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableassetInfoSearchDBDataTable.asset_quantityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] asset_image {
                get {
                    try {
                        return ((byte[])(this[this.tableassetInfoSearchDBDataTable.asset_imageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'asset_image\' in table \'assetInfoSearchDBDataTable\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableassetInfoSearchDBDataTable.asset_imageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string asset_comments {
                get {
                    try {
                        return ((string)(this[this.tableassetInfoSearchDBDataTable.asset_commentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'asset_comments\' in table \'assetInfoSearchDBDataTable\' is DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableassetInfoSearchDBDataTable.asset_commentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isasset_tag_createdNull() {
                return this.IsNull(this.tableassetInfoSearchDBDataTable.asset_tag_createdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setasset_tag_createdNull() {
                this[this.tableassetInfoSearchDBDataTable.asset_tag_createdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isasset_modelNull() {
                return this.IsNull(this.tableassetInfoSearchDBDataTable.asset_modelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setasset_modelNull() {
                this[this.tableassetInfoSearchDBDataTable.asset_modelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isasset_quantityNull() {
                return this.IsNull(this.tableassetInfoSearchDBDataTable.asset_quantityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setasset_quantityNull() {
                this[this.tableassetInfoSearchDBDataTable.asset_quantityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isasset_imageNull() {
                return this.IsNull(this.tableassetInfoSearchDBDataTable.asset_imageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setasset_imageNull() {
                this[this.tableassetInfoSearchDBDataTable.asset_imageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isasset_commentsNull() {
                return this.IsNull(this.tableassetInfoSearchDBDataTable.asset_commentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setasset_commentsNull() {
                this[this.tableassetInfoSearchDBDataTable.asset_commentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AssetInfoDataTableRow[] GetAssetInfoDataTableRows() {
                if ((this.Table.ChildRelations["FK_asset_stat_asset_main"] == null)) {
                    return new AssetInfoDataTableRow[0];
                }
                else {
                    return ((AssetInfoDataTableRow[])(base.GetChildRows(this.Table.ChildRelations["FK_asset_stat_asset_main"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UserInfoDataTableRow : global::System.Data.DataRow {
            
            private UserInfoDataTableDataTable tableUserInfoDataTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UserInfoDataTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUserInfoDataTable = ((UserInfoDataTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string user_id {
                get {
                    return ((string)(this[this.tableUserInfoDataTable.user_idColumn]));
                }
                set {
                    this[this.tableUserInfoDataTable.user_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string user_name {
                get {
                    return ((string)(this[this.tableUserInfoDataTable.user_nameColumn]));
                }
                set {
                    this[this.tableUserInfoDataTable.user_nameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string user_pass {
                get {
                    return ((string)(this[this.tableUserInfoDataTable.user_passColumn]));
                }
                set {
                    this[this.tableUserInfoDataTable.user_passColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string user_role {
                get {
                    return ((string)(this[this.tableUserInfoDataTable.user_roleColumn]));
                }
                set {
                    this[this.tableUserInfoDataTable.user_roleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string user_dept {
                get {
                    try {
                        return ((string)(this[this.tableUserInfoDataTable.user_deptColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'user_dept\' in table \'UserInfoDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUserInfoDataTable.user_deptColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string user_contact {
                get {
                    try {
                        return ((string)(this[this.tableUserInfoDataTable.user_contactColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'user_contact\' in table \'UserInfoDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUserInfoDataTable.user_contactColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string user_email {
                get {
                    try {
                        return ((string)(this[this.tableUserInfoDataTable.user_emailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'user_email\' in table \'UserInfoDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUserInfoDataTable.user_emailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserIDDataTableRow UserIDDataTableRow {
                get {
                    return ((UserIDDataTableRow)(this.GetParentRow(this.Table.ParentRelations["FK_acl_login_acl"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_acl_login_acl"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isuser_deptNull() {
                return this.IsNull(this.tableUserInfoDataTable.user_deptColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setuser_deptNull() {
                this[this.tableUserInfoDataTable.user_deptColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isuser_contactNull() {
                return this.IsNull(this.tableUserInfoDataTable.user_contactColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setuser_contactNull() {
                this[this.tableUserInfoDataTable.user_contactColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isuser_emailNull() {
                return this.IsNull(this.tableUserInfoDataTable.user_emailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setuser_emailNull() {
                this[this.tableUserInfoDataTable.user_emailColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UserIDDataTableRow : global::System.Data.DataRow {
            
            private UserIDDataTableDataTable tableUserIDDataTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UserIDDataTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUserIDDataTable = ((UserIDDataTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string user_id {
                get {
                    return ((string)(this[this.tableUserIDDataTable.user_idColumn]));
                }
                set {
                    this[this.tableUserIDDataTable.user_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserInfoDataTableRow[] GetUserInfoDataTableRows() {
                if ((this.Table.ChildRelations["FK_acl_login_acl"] == null)) {
                    return new UserInfoDataTableRow[0];
                }
                else {
                    return ((UserInfoDataTableRow[])(base.GetChildRows(this.Table.ChildRelations["FK_acl_login_acl"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class readerInfoDataTableRow : global::System.Data.DataRow {
            
            private readerInfoDataTableDataTable tablereaderInfoDataTable;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal readerInfoDataTableRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablereaderInfoDataTable = ((readerInfoDataTableDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string reader_id {
                get {
                    return ((string)(this[this.tablereaderInfoDataTable.reader_idColumn]));
                }
                set {
                    this[this.tablereaderInfoDataTable.reader_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string location_id {
                get {
                    return ((string)(this[this.tablereaderInfoDataTable.location_idColumn]));
                }
                set {
                    this[this.tablereaderInfoDataTable.location_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string map_floor {
                get {
                    try {
                        return ((string)(this[this.tablereaderInfoDataTable.map_floorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'map_floor\' in table \'readerInfoDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablereaderInfoDataTable.map_floorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string asset_info {
                get {
                    try {
                        return ((string)(this[this.tablereaderInfoDataTable.asset_infoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'asset_info\' in table \'readerInfoDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablereaderInfoDataTable.asset_infoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string reader_info {
                get {
                    try {
                        return ((string)(this[this.tablereaderInfoDataTable.reader_infoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'reader_info\' in table \'readerInfoDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablereaderInfoDataTable.reader_infoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string floor_id {
                get {
                    return ((string)(this[this.tablereaderInfoDataTable.floor_idColumn]));
                }
                set {
                    this[this.tablereaderInfoDataTable.floor_idColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string floor_id1 {
                get {
                    return ((string)(this[this.tablereaderInfoDataTable.floor_id1Column]));
                }
                set {
                    this[this.tablereaderInfoDataTable.floor_id1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string map_floor1 {
                get {
                    return ((string)(this[this.tablereaderInfoDataTable.map_floor1Column]));
                }
                set {
                    this[this.tablereaderInfoDataTable.map_floor1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short rooms_pfloor {
                get {
                    try {
                        return ((short)(this[this.tablereaderInfoDataTable.rooms_pfloorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'rooms_pfloor\' in table \'readerInfoDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablereaderInfoDataTable.rooms_pfloorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short assets_pfloor {
                get {
                    try {
                        return ((short)(this[this.tablereaderInfoDataTable.assets_pfloorColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'assets_pfloor\' in table \'readerInfoDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablereaderInfoDataTable.assets_pfloorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string map_comments {
                get {
                    try {
                        return ((string)(this[this.tablereaderInfoDataTable.map_commentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'map_comments\' in table \'readerInfoDataTable\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablereaderInfoDataTable.map_commentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismap_floorNull() {
                return this.IsNull(this.tablereaderInfoDataTable.map_floorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmap_floorNull() {
                this[this.tablereaderInfoDataTable.map_floorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isasset_infoNull() {
                return this.IsNull(this.tablereaderInfoDataTable.asset_infoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setasset_infoNull() {
                this[this.tablereaderInfoDataTable.asset_infoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isreader_infoNull() {
                return this.IsNull(this.tablereaderInfoDataTable.reader_infoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setreader_infoNull() {
                this[this.tablereaderInfoDataTable.reader_infoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isrooms_pfloorNull() {
                return this.IsNull(this.tablereaderInfoDataTable.rooms_pfloorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setrooms_pfloorNull() {
                this[this.tablereaderInfoDataTable.rooms_pfloorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isassets_pfloorNull() {
                return this.IsNull(this.tablereaderInfoDataTable.assets_pfloorColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setassets_pfloorNull() {
                this[this.tablereaderInfoDataTable.assets_pfloorColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Ismap_commentsNull() {
                return this.IsNull(this.tablereaderInfoDataTable.map_commentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setmap_commentsNull() {
                this[this.tablereaderInfoDataTable.map_commentsColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ChartingQueryRow : global::System.Data.DataRow {
            
            private ChartingQueryDataTable tableChartingQuery;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ChartingQueryRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableChartingQuery = ((ChartingQueryDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string aType {
                get {
                    return ((string)(this[this.tableChartingQuery.aTypeColumn]));
                }
                set {
                    this[this.tableChartingQuery.aTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int aCount {
                get {
                    try {
                        return ((int)(this[this.tableChartingQuery.aCountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'aCount\' in table \'ChartingQuery\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableChartingQuery.aCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsaCountNull() {
                return this.IsNull(this.tableChartingQuery.aCountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetaCountNull() {
                this[this.tableChartingQuery.aCountColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class AssetInfoDataTableRowChangeEvent : global::System.EventArgs {
            
            private AssetInfoDataTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AssetInfoDataTableRowChangeEvent(AssetInfoDataTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public AssetInfoDataTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class assetInfoSearchDBDataTableRowChangeEvent : global::System.EventArgs {
            
            private assetInfoSearchDBDataTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public assetInfoSearchDBDataTableRowChangeEvent(assetInfoSearchDBDataTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public assetInfoSearchDBDataTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UserInfoDataTableRowChangeEvent : global::System.EventArgs {
            
            private UserInfoDataTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserInfoDataTableRowChangeEvent(UserInfoDataTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserInfoDataTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UserIDDataTableRowChangeEvent : global::System.EventArgs {
            
            private UserIDDataTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserIDDataTableRowChangeEvent(UserIDDataTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserIDDataTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class readerInfoDataTableRowChangeEvent : global::System.EventArgs {
            
            private readerInfoDataTableRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public readerInfoDataTableRowChangeEvent(readerInfoDataTableRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public readerInfoDataTableRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ChartingQueryRowChangeEvent : global::System.EventArgs {
            
            private ChartingQueryRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChartingQueryRowChangeEvent(ChartingQueryRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChartingQueryRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace ZTraka_App.ztATdbLocalDataSet1TableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class AssetInfoDataTableTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public AssetInfoDataTableTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "AssetInfoDataTable";
            tableMapping.ColumnMappings.Add("asset_id", "asset_id");
            tableMapping.ColumnMappings.Add("tag_id", "tag_id");
            tableMapping.ColumnMappings.Add("asset_location", "asset_location");
            tableMapping.ColumnMappings.Add("asset_category", "asset_category");
            tableMapping.ColumnMappings.Add("asset_desc", "asset_desc");
            tableMapping.ColumnMappings.Add("asset_tag_created", "asset_tag_created");
            tableMapping.ColumnMappings.Add("asset_model", "asset_model");
            tableMapping.ColumnMappings.Add("asset_lastchecked", "asset_lastchecked");
            tableMapping.ColumnMappings.Add("asset_lastloc", "asset_lastloc");
            tableMapping.ColumnMappings.Add("asset_maint_due", "asset_maint_due");
            tableMapping.ColumnMappings.Add("tag_expiry", "tag_expiry");
            tableMapping.ColumnMappings.Add("asset_status", "asset_status");
            tableMapping.ColumnMappings.Add("asset_alarms", "asset_alarms");
            tableMapping.ColumnMappings.Add("asset_value", "asset_value");
            tableMapping.ColumnMappings.Add("asset_quantity", "asset_quantity");
            tableMapping.ColumnMappings.Add("asset_image", "asset_image");
            tableMapping.ColumnMappings.Add("asset_comments", "asset_comments");
            tableMapping.ColumnMappings.Add("asset_id1", "asset_id1");
            tableMapping.ColumnMappings.Add("tag_id1", "tag_id1");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ZTraka_App.Properties.Settings.Default.ztATdbLocalConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[10];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT * \r\nFROM asset_main INNER JOIN asset_stat \r\nON asset_main.asset_id = asset" +
                "_stat.asset_id\r\nWHERE asset_main.tag_id = @tagid;";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tagid", global::System.Data.SqlDbType.NChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "tag_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "DELETE FROM [asset_main] WHERE (([asset_id] = @Original_asset_id))";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_asset_id", global::System.Data.SqlDbType.NChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "asset_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "SELECT * \r\nFROM asset_main INNER JOIN asset_stat \r\nON asset_main.asset_id = asset" +
                "_stat.asset_id\r\nWHERE asset_main.asset_id = @asset_id;";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@asset_id", global::System.Data.SqlDbType.NChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "asset_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = @"SELECT * 
FROM asset_main INNER JOIN asset_stat 
ON asset_main.asset_id = asset_stat.asset_id 
WHERE ((substring(asset_main.asset_id,1,4096) LIKE @wChar)  
OR (substring(asset_main.tag_id,1,4096) LIKE @wChar) 
OR (substring([asset_category],1,4096) LIKE @wChar) 
OR (substring([asset_location],1,4096) LIKE @wChar) 
OR (substring([asset_desc],1,4096) LIKE @wChar) 
OR (substring([asset_model],1,4096) LIKE @wChar) 
OR (substring([asset_comments],1,4096) LIKE @wChar) 
OR (substring([asset_status],1,4096) LIKE @wChar) 
OR (substring([asset_alarms],1,4096) LIKE @wChar) 
OR (CONVERT(VARCHAR(25), asset_tag_created, 126) LIKE @wChar) 
OR (CONVERT(VARCHAR(25), tag_expiry, 126) LIKE @wChar) 
OR (CONVERT(VARCHAR(25), asset_maint_due, 126) LIKE @wChar) 
OR (CONVERT(VARCHAR(25), asset_lastchecked, 126) LIKE @wChar))";
            this._commandCollection[3].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@wChar", global::System.Data.SqlDbType.VarChar, 1024, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = "INSERT INTO [asset_stat] \r\nVALUES (@assetid,@tagid,@assetlastchecked,@assetlastlo" +
                "c,@assetmaintdue,@tagexpiry,@assetstatus,@assetalarms,@assetvalue)";
            this._commandCollection[4].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assetid", global::System.Data.SqlDbType.NChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "asset_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tagid", global::System.Data.SqlDbType.NChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "tag_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assetlastchecked", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "asset_lastchecked", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assetlastloc", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "asset_lastloc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assetmaintdue", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "asset_maint_due", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tagexpiry", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "tag_expiry", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assetstatus", global::System.Data.SqlDbType.NChar, 15, global::System.Data.ParameterDirection.Input, 0, 0, "asset_status", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assetalarms", global::System.Data.SqlDbType.NChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "asset_alarms", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assetvalue", global::System.Data.SqlDbType.SmallMoney, 4, global::System.Data.ParameterDirection.Input, 0, 0, "asset_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[5].Connection = this.Connection;
            this._commandCollection[5].CommandText = "INSERT INTO [asset_main] \r\nVALUES (@assetid,@tagid,@assetlocation,@assetcategory," +
                "@assetdesc,@assettagcreated,@assetmodel,@assetquantity,@assetimage,@assetcomment" +
                "s)";
            this._commandCollection[5].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assetid", global::System.Data.SqlDbType.NChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "asset_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tagid", global::System.Data.SqlDbType.NChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "tag_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assetlocation", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "asset_location", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assetcategory", global::System.Data.SqlDbType.NChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "asset_category", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assetdesc", global::System.Data.SqlDbType.NText, 1073741823, global::System.Data.ParameterDirection.Input, 0, 0, "asset_desc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assettagcreated", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "asset_tag_created", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assetmodel", global::System.Data.SqlDbType.NChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "asset_model", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assetquantity", global::System.Data.SqlDbType.SmallInt, 2, global::System.Data.ParameterDirection.Input, 0, 0, "asset_quantity", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assetimage", global::System.Data.SqlDbType.Image, 2147483647, global::System.Data.ParameterDirection.Input, 0, 0, "asset_image", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assetcomments", global::System.Data.SqlDbType.NText, 1073741823, global::System.Data.ParameterDirection.Input, 0, 0, "asset_comments", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[6].Connection = this.Connection;
            this._commandCollection[6].CommandText = @"UPDATE [asset_stat]
SET asset_stat.tag_id = @tagid, [asset_lastchecked] = @assetlastchecked, [asset_lastloc] = @assetlastloc, 
	[asset_maint_due] = @assetmaintdue, [tag_expiry] = @tagexpiry, [asset_status] = @assetstatus, 
	[asset_alarms] = @assetalarms, [asset_value] = @assetvalue 
WHERE (asset_stat.asset_id = @assetid)";
            this._commandCollection[6].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tagid", global::System.Data.SqlDbType.NChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "tag_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assetlastchecked", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "asset_lastchecked", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assetlastloc", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "asset_lastloc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assetmaintdue", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "asset_maint_due", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tagexpiry", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "tag_expiry", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assetstatus", global::System.Data.SqlDbType.NChar, 15, global::System.Data.ParameterDirection.Input, 0, 0, "asset_status", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assetalarms", global::System.Data.SqlDbType.NChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "asset_alarms", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assetvalue", global::System.Data.SqlDbType.SmallMoney, 4, global::System.Data.ParameterDirection.Input, 0, 0, "asset_value", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assetid", global::System.Data.SqlDbType.NChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "asset_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[7] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[7].Connection = this.Connection;
            this._commandCollection[7].CommandText = "UPDATE [asset_stat] \r\nSET [asset_lastloc] = @assetlastloc \r\nWHERE (asset_stat.tag" +
                "_id = @tagid)";
            this._commandCollection[7].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[7].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assetlastloc", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "asset_lastloc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tagid", global::System.Data.SqlDbType.NChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "tag_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[8] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[8].Connection = this.Connection;
            this._commandCollection[8].CommandText = "UPDATE [asset_main] \r\nSET [asset_location] = @assetlocation \r\nWHERE (asset_main.t" +
                "ag_id = @tagid)";
            this._commandCollection[8].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[8].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assetlocation", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "asset_location", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[8].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tagid", global::System.Data.SqlDbType.NChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "tag_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[9] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[9].Connection = this.Connection;
            this._commandCollection[9].CommandText = @"UPDATE [asset_main]
SET asset_main.tag_id = @tagid, [asset_location] = @assetlocation, [asset_category] = @assetcategory, [asset_desc] = @assetdesc, 
[asset_tag_created] = @assettagcreated, [asset_model] = @assetmodel, [asset_quantity] = @assetquantity, 
[asset_image] = @assetimage, [asset_comments] = @assetcomments 
WHERE (asset_main.asset_id = @assetid)";
            this._commandCollection[9].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[9].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@tagid", global::System.Data.SqlDbType.NChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "tag_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assetlocation", global::System.Data.SqlDbType.VarChar, 20, global::System.Data.ParameterDirection.Input, 0, 0, "asset_location", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assetcategory", global::System.Data.SqlDbType.NChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "asset_category", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assetdesc", global::System.Data.SqlDbType.NText, 1073741823, global::System.Data.ParameterDirection.Input, 0, 0, "asset_desc", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assettagcreated", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "asset_tag_created", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assetmodel", global::System.Data.SqlDbType.NChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "asset_model", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assetquantity", global::System.Data.SqlDbType.SmallInt, 2, global::System.Data.ParameterDirection.Input, 0, 0, "asset_quantity", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assetimage", global::System.Data.SqlDbType.Image, 2147483647, global::System.Data.ParameterDirection.Input, 0, 0, "asset_image", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assetcomments", global::System.Data.SqlDbType.NText, 1073741823, global::System.Data.ParameterDirection.Input, 0, 0, "asset_comments", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[9].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assetid", global::System.Data.SqlDbType.NChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "asset_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ztATdbLocalDataSet1.AssetInfoDataTableDataTable dataTable, string tagid) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((tagid == null)) {
                throw new global::System.ArgumentNullException("tagid");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(tagid));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ztATdbLocalDataSet1.AssetInfoDataTableDataTable GetData(string tagid) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((tagid == null)) {
                throw new global::System.ArgumentNullException("tagid");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(tagid));
            }
            ztATdbLocalDataSet1.AssetInfoDataTableDataTable dataTable = new ztATdbLocalDataSet1.AssetInfoDataTableDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillAllAssetID(ztATdbLocalDataSet1.AssetInfoDataTableDataTable dataTable, string asset_id) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((asset_id == null)) {
                throw new global::System.ArgumentNullException("asset_id");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(asset_id));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBy(ztATdbLocalDataSet1.AssetInfoDataTableDataTable dataTable, string wChar) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((wChar == null)) {
                throw new global::System.ArgumentNullException("wChar");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(wChar));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual ztATdbLocalDataSet1.AssetInfoDataTableDataTable GetDataBy11(string wChar) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((wChar == null)) {
                throw new global::System.ArgumentNullException("wChar");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(wChar));
            }
            ztATdbLocalDataSet1.AssetInfoDataTableDataTable dataTable = new ztATdbLocalDataSet1.AssetInfoDataTableDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, false)]
        public virtual int DeleteAsset(string Original_asset_id) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((Original_asset_id == null)) {
                throw new global::System.ArgumentNullException("Original_asset_id");
            }
            else {
                command.Parameters[0].Value = ((string)(Original_asset_id));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertAssetInfoStat(string assetid, string tagid, global::System.Nullable<global::System.DateTime> assetlastchecked, string assetlastloc, global::System.Nullable<global::System.DateTime> assetmaintdue, global::System.Nullable<global::System.DateTime> tagexpiry, string assetstatus, string assetalarms, global::System.Nullable<decimal> assetvalue) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[4];
            if ((assetid == null)) {
                throw new global::System.ArgumentNullException("assetid");
            }
            else {
                command.Parameters[0].Value = ((string)(assetid));
            }
            if ((tagid == null)) {
                throw new global::System.ArgumentNullException("tagid");
            }
            else {
                command.Parameters[1].Value = ((string)(tagid));
            }
            if ((assetlastchecked.HasValue == true)) {
                command.Parameters[2].Value = ((System.DateTime)(assetlastchecked.Value));
            }
            else {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((assetlastloc == null)) {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[3].Value = ((string)(assetlastloc));
            }
            if ((assetmaintdue.HasValue == true)) {
                command.Parameters[4].Value = ((System.DateTime)(assetmaintdue.Value));
            }
            else {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((tagexpiry.HasValue == true)) {
                command.Parameters[5].Value = ((System.DateTime)(tagexpiry.Value));
            }
            else {
                command.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((assetstatus == null)) {
                throw new global::System.ArgumentNullException("assetstatus");
            }
            else {
                command.Parameters[6].Value = ((string)(assetstatus));
            }
            if ((assetalarms == null)) {
                command.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[7].Value = ((string)(assetalarms));
            }
            if ((assetvalue.HasValue == true)) {
                command.Parameters[8].Value = ((decimal)(assetvalue.Value));
            }
            else {
                command.Parameters[8].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertAssetMain(string assetid, string tagid, string assetlocation, string assetcategory, string assetdesc, global::System.Nullable<global::System.DateTime> assettagcreated, string assetmodel, global::System.Nullable<short> assetquantity, byte[] assetimage, string assetcomments) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[5];
            if ((assetid == null)) {
                throw new global::System.ArgumentNullException("assetid");
            }
            else {
                command.Parameters[0].Value = ((string)(assetid));
            }
            if ((tagid == null)) {
                throw new global::System.ArgumentNullException("tagid");
            }
            else {
                command.Parameters[1].Value = ((string)(tagid));
            }
            if ((assetlocation == null)) {
                throw new global::System.ArgumentNullException("assetlocation");
            }
            else {
                command.Parameters[2].Value = ((string)(assetlocation));
            }
            if ((assetcategory == null)) {
                throw new global::System.ArgumentNullException("assetcategory");
            }
            else {
                command.Parameters[3].Value = ((string)(assetcategory));
            }
            if ((assetdesc == null)) {
                throw new global::System.ArgumentNullException("assetdesc");
            }
            else {
                command.Parameters[4].Value = ((string)(assetdesc));
            }
            if ((assettagcreated.HasValue == true)) {
                command.Parameters[5].Value = ((System.DateTime)(assettagcreated.Value));
            }
            else {
                command.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((assetmodel == null)) {
                command.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[6].Value = ((string)(assetmodel));
            }
            if ((assetquantity.HasValue == true)) {
                command.Parameters[7].Value = ((short)(assetquantity.Value));
            }
            else {
                command.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((assetimage == null)) {
                command.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[8].Value = ((byte[])(assetimage));
            }
            if ((assetcomments == null)) {
                command.Parameters[9].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[9].Value = ((string)(assetcomments));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateAssetInfoStat(string tagid, global::System.Nullable<global::System.DateTime> assetlastchecked, string assetlastloc, global::System.Nullable<global::System.DateTime> assetmaintdue, global::System.Nullable<global::System.DateTime> tagexpiry, string assetstatus, string assetalarms, global::System.Nullable<decimal> assetvalue, string assetid) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[6];
            if ((tagid == null)) {
                throw new global::System.ArgumentNullException("tagid");
            }
            else {
                command.Parameters[0].Value = ((string)(tagid));
            }
            if ((assetlastchecked.HasValue == true)) {
                command.Parameters[1].Value = ((System.DateTime)(assetlastchecked.Value));
            }
            else {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((assetlastloc == null)) {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(assetlastloc));
            }
            if ((assetmaintdue.HasValue == true)) {
                command.Parameters[3].Value = ((System.DateTime)(assetmaintdue.Value));
            }
            else {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((tagexpiry.HasValue == true)) {
                command.Parameters[4].Value = ((System.DateTime)(tagexpiry.Value));
            }
            else {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((assetstatus == null)) {
                throw new global::System.ArgumentNullException("assetstatus");
            }
            else {
                command.Parameters[5].Value = ((string)(assetstatus));
            }
            if ((assetalarms == null)) {
                command.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[6].Value = ((string)(assetalarms));
            }
            if ((assetvalue.HasValue == true)) {
                command.Parameters[7].Value = ((decimal)(assetvalue.Value));
            }
            else {
                command.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((assetid == null)) {
                throw new global::System.ArgumentNullException("assetid");
            }
            else {
                command.Parameters[8].Value = ((string)(assetid));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateAssetLastLoc(string assetlastloc, string tagid) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[7];
            if ((assetlastloc == null)) {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[0].Value = ((string)(assetlastloc));
            }
            if ((tagid == null)) {
                throw new global::System.ArgumentNullException("tagid");
            }
            else {
                command.Parameters[1].Value = ((string)(tagid));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateAssetLoc(string assetlocation, string tagid) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[8];
            if ((assetlocation == null)) {
                throw new global::System.ArgumentNullException("assetlocation");
            }
            else {
                command.Parameters[0].Value = ((string)(assetlocation));
            }
            if ((tagid == null)) {
                throw new global::System.ArgumentNullException("tagid");
            }
            else {
                command.Parameters[1].Value = ((string)(tagid));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateAssetMain(string tagid, string assetlocation, string assetcategory, string assetdesc, global::System.Nullable<global::System.DateTime> assettagcreated, string assetmodel, global::System.Nullable<short> assetquantity, byte[] assetimage, string assetcomments, string assetid) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[9];
            if ((tagid == null)) {
                throw new global::System.ArgumentNullException("tagid");
            }
            else {
                command.Parameters[0].Value = ((string)(tagid));
            }
            if ((assetlocation == null)) {
                throw new global::System.ArgumentNullException("assetlocation");
            }
            else {
                command.Parameters[1].Value = ((string)(assetlocation));
            }
            if ((assetcategory == null)) {
                throw new global::System.ArgumentNullException("assetcategory");
            }
            else {
                command.Parameters[2].Value = ((string)(assetcategory));
            }
            if ((assetdesc == null)) {
                throw new global::System.ArgumentNullException("assetdesc");
            }
            else {
                command.Parameters[3].Value = ((string)(assetdesc));
            }
            if ((assettagcreated.HasValue == true)) {
                command.Parameters[4].Value = ((System.DateTime)(assettagcreated.Value));
            }
            else {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((assetmodel == null)) {
                command.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[5].Value = ((string)(assetmodel));
            }
            if ((assetquantity.HasValue == true)) {
                command.Parameters[6].Value = ((short)(assetquantity.Value));
            }
            else {
                command.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((assetimage == null)) {
                command.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[7].Value = ((byte[])(assetimage));
            }
            if ((assetcomments == null)) {
                command.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[8].Value = ((string)(assetcomments));
            }
            if ((assetid == null)) {
                throw new global::System.ArgumentNullException("assetid");
            }
            else {
                command.Parameters[9].Value = ((string)(assetid));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class assetInfoSearchDBDataTableTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public assetInfoSearchDBDataTableTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "assetInfoSearchDBDataTable";
            tableMapping.ColumnMappings.Add("asset_id", "asset_id");
            tableMapping.ColumnMappings.Add("tag_id", "tag_id");
            tableMapping.ColumnMappings.Add("asset_location", "asset_location");
            tableMapping.ColumnMappings.Add("asset_category", "asset_category");
            tableMapping.ColumnMappings.Add("asset_desc", "asset_desc");
            tableMapping.ColumnMappings.Add("asset_tag_created", "asset_tag_created");
            tableMapping.ColumnMappings.Add("asset_model", "asset_model");
            tableMapping.ColumnMappings.Add("asset_quantity", "asset_quantity");
            tableMapping.ColumnMappings.Add("asset_image", "asset_image");
            tableMapping.ColumnMappings.Add("asset_comments", "asset_comments");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ZTraka_App.Properties.Settings.Default.ztATdbLocalConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[2];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT * 
FROM [asset_main] 
WHERE (substring([asset_id],1,4096) LIKE @wChar) 
OR (substring([tag_id],1,4096) LIKE @wChar) 
OR (substring([asset_category],1,4096) LIKE @wChar) 
OR (substring([asset_location],1,4096) LIKE @wChar) 
OR (substring([asset_desc],1,4096) LIKE @wChar) 
OR (substring([asset_model],1,4096) LIKE @wChar) 
OR (substring([asset_comments],1,4096) LIKE @wChar) 
OR (CONVERT(VARCHAR(25), asset_tag_created, 126) LIKE @wChar)";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@wChar", global::System.Data.SqlDbType.VarChar, 1024, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT TOP (1) asset_category, asset_comments, asset_desc, asset_id, asset_image," +
                " asset_location, asset_model, asset_quantity, asset_tag_created, tag_id FROM ass" +
                "et_main";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ztATdbLocalDataSet1.assetInfoSearchDBDataTableDataTable dataTable, string wChar) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((wChar == null)) {
                throw new global::System.ArgumentNullException("wChar");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(wChar));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ztATdbLocalDataSet1.assetInfoSearchDBDataTableDataTable GetData(string wChar) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((wChar == null)) {
                throw new global::System.ArgumentNullException("wChar");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(wChar));
            }
            ztATdbLocalDataSet1.assetInfoSearchDBDataTableDataTable dataTable = new ztATdbLocalDataSet1.assetInfoSearchDBDataTableDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int TestConnection(ztATdbLocalDataSet1.assetInfoSearchDBDataTableDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual ztATdbLocalDataSet1.assetInfoSearchDBDataTableDataTable GetDataTestConn() {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            ztATdbLocalDataSet1.assetInfoSearchDBDataTableDataTable dataTable = new ztATdbLocalDataSet1.assetInfoSearchDBDataTableDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class UserInfoDataTableTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UserInfoDataTableTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "UserInfoDataTable";
            tableMapping.ColumnMappings.Add("user_id", "user_id");
            tableMapping.ColumnMappings.Add("user_name", "user_name");
            tableMapping.ColumnMappings.Add("user_pass", "user_pass");
            tableMapping.ColumnMappings.Add("user_role", "user_role");
            tableMapping.ColumnMappings.Add("user_dept", "user_dept");
            tableMapping.ColumnMappings.Add("user_contact", "user_contact");
            tableMapping.ColumnMappings.Add("user_email", "user_email");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ZTraka_App.Properties.Settings.Default.ztATdbLocalConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[7];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT     acl.user_id, acl.user_name, acl_login.user_pass,acl.user_role,acl.user_dept,acl.user_contact,acl.user_email
FROM         acl INNER JOIN
                      acl_login ON acl.user_id = acl_login.user_id
WHERE     (acl_login.user_id LIKE @userid)";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@userid", global::System.Data.SqlDbType.NVarChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "user_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "INSERT INTO [acl]\r\nVALUES (@userid,@username,@userdept,@userrole,@userroleid,@use" +
                "rcontact,@useremail,@lastlogin,@lastupdate)";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@userid", global::System.Data.SqlDbType.NVarChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "user_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@username", global::System.Data.SqlDbType.VarChar, 25, global::System.Data.ParameterDirection.Input, 0, 0, "user_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@userdept", global::System.Data.SqlDbType.NVarChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "user_dept", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@userrole", global::System.Data.SqlDbType.NVarChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "user_role", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@userroleid", global::System.Data.SqlDbType.VarChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "user_roleid", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@usercontact", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "user_contact", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@useremail", global::System.Data.SqlDbType.NVarChar, 30, global::System.Data.ParameterDirection.Input, 0, 0, "user_email", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@lastlogin", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "user_last_login", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@lastupdate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "user_last_update", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "INSERT INTO [acl_login]\r\nVALUES ( @userid,@userroleid,@userpass,@datecreated)";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@userid", global::System.Data.SqlDbType.NVarChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "user_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@userroleid", global::System.Data.SqlDbType.VarChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "user_roleid", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@userpass", global::System.Data.SqlDbType.NVarChar, 40, global::System.Data.ParameterDirection.Input, 0, 0, "user_pass", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@datecreated", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "date_created", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "UPDATE [acl_login]\r\nSET [user_pass] = @newPass\r\nWHERE [user_id] = @userID";
            this._commandCollection[3].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@newPass", global::System.Data.SqlDbType.NVarChar, 40, global::System.Data.ParameterDirection.Input, 0, 0, "user_pass", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@userID", global::System.Data.SqlDbType.NVarChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "user_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[4] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = "UPDATE [acl]\r\nSET [user_dept] = @userdept,[user_role] = @userrole,[user_roleid] =" +
                " @userroleid,[user_last_update] = @userlastupdate\r\nWHERE [user_id] = @userid";
            this._commandCollection[4].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@userdept", global::System.Data.SqlDbType.NVarChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "user_dept", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@userrole", global::System.Data.SqlDbType.NVarChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "user_role", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@userroleid", global::System.Data.SqlDbType.VarChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "user_roleid", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@userlastupdate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "user_last_update", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@userid", global::System.Data.SqlDbType.NVarChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "user_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[5] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[5].Connection = this.Connection;
            this._commandCollection[5].CommandText = "UPDATE [acl_login]\r\nSET [user_roleid] = @userroleid\r\nWHERE [user_id] = @userid";
            this._commandCollection[5].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@userroleid", global::System.Data.SqlDbType.VarChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "user_roleid", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@userid", global::System.Data.SqlDbType.NVarChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "user_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[6] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[6].Connection = this.Connection;
            this._commandCollection[6].CommandText = "UPDATE [acl]\r\nSET [user_name] = @username,[user_contact] = @usercontact,[user_ema" +
                "il] = @useremail,[user_last_update] = @userlastupdate\r\nWHERE [user_id] = @userid" +
                "";
            this._commandCollection[6].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@username", global::System.Data.SqlDbType.VarChar, 25, global::System.Data.ParameterDirection.Input, 0, 0, "user_name", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@usercontact", global::System.Data.SqlDbType.NVarChar, 50, global::System.Data.ParameterDirection.Input, 0, 0, "user_contact", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@useremail", global::System.Data.SqlDbType.NVarChar, 30, global::System.Data.ParameterDirection.Input, 0, 0, "user_email", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@userlastupdate", global::System.Data.SqlDbType.DateTime, 8, global::System.Data.ParameterDirection.Input, 0, 0, "user_last_update", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@userid", global::System.Data.SqlDbType.NVarChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "user_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ztATdbLocalDataSet1.UserInfoDataTableDataTable dataTable, string userid) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((userid == null)) {
                throw new global::System.ArgumentNullException("userid");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(userid));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ztATdbLocalDataSet1.UserInfoDataTableDataTable GetData(string userid) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((userid == null)) {
                throw new global::System.ArgumentNullException("userid");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(userid));
            }
            ztATdbLocalDataSet1.UserInfoDataTableDataTable dataTable = new ztATdbLocalDataSet1.UserInfoDataTableDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertACL(string userid, string username, string userdept, string userrole, string userroleid, string usercontact, string useremail, global::System.Nullable<global::System.DateTime> lastlogin, global::System.Nullable<global::System.DateTime> lastupdate) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((userid == null)) {
                throw new global::System.ArgumentNullException("userid");
            }
            else {
                command.Parameters[0].Value = ((string)(userid));
            }
            if ((username == null)) {
                throw new global::System.ArgumentNullException("username");
            }
            else {
                command.Parameters[1].Value = ((string)(username));
            }
            if ((userdept == null)) {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(userdept));
            }
            if ((userrole == null)) {
                throw new global::System.ArgumentNullException("userrole");
            }
            else {
                command.Parameters[3].Value = ((string)(userrole));
            }
            if ((userroleid == null)) {
                throw new global::System.ArgumentNullException("userroleid");
            }
            else {
                command.Parameters[4].Value = ((string)(userroleid));
            }
            if ((usercontact == null)) {
                command.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[5].Value = ((string)(usercontact));
            }
            if ((useremail == null)) {
                command.Parameters[6].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[6].Value = ((string)(useremail));
            }
            if ((lastlogin.HasValue == true)) {
                command.Parameters[7].Value = ((System.DateTime)(lastlogin.Value));
            }
            else {
                command.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((lastupdate.HasValue == true)) {
                command.Parameters[8].Value = ((System.DateTime)(lastupdate.Value));
            }
            else {
                command.Parameters[8].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertACLlogin(string userid, string userroleid, string userpass, global::System.Nullable<global::System.DateTime> datecreated) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[2];
            if ((userid == null)) {
                throw new global::System.ArgumentNullException("userid");
            }
            else {
                command.Parameters[0].Value = ((string)(userid));
            }
            if ((userroleid == null)) {
                throw new global::System.ArgumentNullException("userroleid");
            }
            else {
                command.Parameters[1].Value = ((string)(userroleid));
            }
            if ((userpass == null)) {
                throw new global::System.ArgumentNullException("userpass");
            }
            else {
                command.Parameters[2].Value = ((string)(userpass));
            }
            if ((datecreated.HasValue == true)) {
                command.Parameters[3].Value = ((System.DateTime)(datecreated.Value));
            }
            else {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdatePassword(string newPass, string userID) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[3];
            if ((newPass == null)) {
                throw new global::System.ArgumentNullException("newPass");
            }
            else {
                command.Parameters[0].Value = ((string)(newPass));
            }
            if ((userID == null)) {
                throw new global::System.ArgumentNullException("userID");
            }
            else {
                command.Parameters[1].Value = ((string)(userID));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdatePrivilegesACL(string userdept, string userrole, string userroleid, global::System.Nullable<global::System.DateTime> userlastupdate, string userid) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[4];
            if ((userdept == null)) {
                command.Parameters[0].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[0].Value = ((string)(userdept));
            }
            if ((userrole == null)) {
                throw new global::System.ArgumentNullException("userrole");
            }
            else {
                command.Parameters[1].Value = ((string)(userrole));
            }
            if ((userroleid == null)) {
                throw new global::System.ArgumentNullException("userroleid");
            }
            else {
                command.Parameters[2].Value = ((string)(userroleid));
            }
            if ((userlastupdate.HasValue == true)) {
                command.Parameters[3].Value = ((System.DateTime)(userlastupdate.Value));
            }
            else {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((userid == null)) {
                throw new global::System.ArgumentNullException("userid");
            }
            else {
                command.Parameters[4].Value = ((string)(userid));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdatePrivilegesACLlogin(string userroleid, string userid) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[5];
            if ((userroleid == null)) {
                throw new global::System.ArgumentNullException("userroleid");
            }
            else {
                command.Parameters[0].Value = ((string)(userroleid));
            }
            if ((userid == null)) {
                throw new global::System.ArgumentNullException("userid");
            }
            else {
                command.Parameters[1].Value = ((string)(userid));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateProfile(string username, string usercontact, string useremail, global::System.Nullable<global::System.DateTime> userlastupdate, string userid) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[6];
            if ((username == null)) {
                throw new global::System.ArgumentNullException("username");
            }
            else {
                command.Parameters[0].Value = ((string)(username));
            }
            if ((usercontact == null)) {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[1].Value = ((string)(usercontact));
            }
            if ((useremail == null)) {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(useremail));
            }
            if ((userlastupdate.HasValue == true)) {
                command.Parameters[3].Value = ((System.DateTime)(userlastupdate.Value));
            }
            else {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((userid == null)) {
                throw new global::System.ArgumentNullException("userid");
            }
            else {
                command.Parameters[4].Value = ((string)(userid));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class UserIDDataTableTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UserIDDataTableTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "UserIDDataTable";
            tableMapping.ColumnMappings.Add("user_id", "user_id");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [acl] WHERE (([user_id] = @Original_user_id))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_user_id", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "user_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [acl] SET [user_id] = @user_id WHERE (([user_id] = @Original_user_id));\r\nS" +
                "ELECT user_id FROM acl WHERE (user_id = @user_id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@user_id", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "user_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_user_id", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "user_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ZTraka_App.Properties.Settings.Default.ztATdbLocalConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[3];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT [user_id] \r\nFROM [acl]";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "DELETE FROM [acl] WHERE (([user_id] = @Original_user_id))";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_user_id", global::System.Data.SqlDbType.NVarChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "user_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "SELECT user_id FROM acl WHERE (user_id LIKE @wChar) OR (user_dept LIKE @wChar) OR" +
                " (user_contact LIKE @wChar) OR (user_email LIKE @wChar) OR (user_name LIKE @wCha" +
                "r) OR (user_role LIKE @wChar) OR (user_roleid LIKE @wChar) OR (user_last_login L" +
                "IKE @wChar)";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@wChar", global::System.Data.SqlDbType.NVarChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "user_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ztATdbLocalDataSet1.UserIDDataTableDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ztATdbLocalDataSet1.UserIDDataTableDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ztATdbLocalDataSet1.UserIDDataTableDataTable dataTable = new ztATdbLocalDataSet1.UserIDDataTableDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillSearchDB(ztATdbLocalDataSet1.UserIDDataTableDataTable dataTable, string wChar) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((wChar == null)) {
                throw new global::System.ArgumentNullException("wChar");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(wChar));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, false)]
        public virtual ztATdbLocalDataSet1.UserIDDataTableDataTable GetDataDB(string wChar) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((wChar == null)) {
                throw new global::System.ArgumentNullException("wChar");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(wChar));
            }
            ztATdbLocalDataSet1.UserIDDataTableDataTable dataTable = new ztATdbLocalDataSet1.UserIDDataTableDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ztATdbLocalDataSet1.UserIDDataTableDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ztATdbLocalDataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "UserIDDataTable");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, false)]
        public virtual int DeleteRecord(string Original_user_id) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((Original_user_id == null)) {
                throw new global::System.ArgumentNullException("Original_user_id");
            }
            else {
                command.Parameters[0].Value = ((string)(Original_user_id));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class readerInfoDataTableTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public readerInfoDataTableTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "readerInfoDataTable";
            tableMapping.ColumnMappings.Add("reader_id", "reader_id");
            tableMapping.ColumnMappings.Add("location_id", "location_id");
            tableMapping.ColumnMappings.Add("map_floor", "map_floor");
            tableMapping.ColumnMappings.Add("asset_info", "asset_info");
            tableMapping.ColumnMappings.Add("reader_info", "reader_info");
            tableMapping.ColumnMappings.Add("floor_id", "floor_id");
            tableMapping.ColumnMappings.Add("floor_id1", "floor_id1");
            tableMapping.ColumnMappings.Add("map_floor1", "map_floor1");
            tableMapping.ColumnMappings.Add("rooms_pfloor", "rooms_pfloor");
            tableMapping.ColumnMappings.Add("assets_pfloor", "assets_pfloor");
            tableMapping.ColumnMappings.Add("map_comments", "map_comments");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ZTraka_App.Properties.Settings.Default.ztATdbLocalConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[8];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT * 
FROM [reader] INNER JOIN [map]
ON reader.floor_id = map.floor_id
WHERE ((substring([reader_id],1,4096) LIKE @searchString) 
OR (substring([location_id],1,4096) LIKE @searchString) 
OR (substring(reader.map_floor,1,4096) LIKE @searchString) 
OR (substring([asset_info],1,4096) LIKE @searchString) 
OR (substring([reader_info],1,4096) LIKE @searchString))";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[0].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@searchString", global::System.Data.SqlDbType.VarChar, 1024, global::System.Data.ParameterDirection.Input, 0, 0, "", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "DELETE FROM [reader] \r\nWHERE [reader_id] = @reader_id";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@reader_id", global::System.Data.SqlDbType.NChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "reader_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "SELECT TOP 1 * \r\nFROM [reader] INNER JOIN [map] \r\nON reader.floor_id = map.floor_" +
                "id \r\nWHERE (map.map_floor = @mapfloor) ";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@mapfloor", global::System.Data.SqlDbType.NChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "Expr2", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[3] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "SELECT * \r\nFROM [reader] INNER JOIN [map] \r\nON reader.floor_id = map.floor_id \r\nW" +
                "HERE (reader_id = @reader_id) ";
            this._commandCollection[3].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[3].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@reader_id", global::System.Data.SqlDbType.NChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "reader_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = "INSERT INTO [map] \r\nVALUES (@floor_id,@map_floor,@rooms_pfloor,@assets_pfloor,@ma" +
                "p_comments)";
            this._commandCollection[4].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@floor_id", global::System.Data.SqlDbType.NChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "floor_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@map_floor", global::System.Data.SqlDbType.NChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "map_floor", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@rooms_pfloor", global::System.Data.SqlDbType.SmallInt, 2, global::System.Data.ParameterDirection.Input, 0, 0, "rooms_pfloor", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assets_pfloor", global::System.Data.SqlDbType.SmallInt, 2, global::System.Data.ParameterDirection.Input, 0, 0, "assets_pfloor", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[4].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@map_comments", global::System.Data.SqlDbType.NText, 1073741823, global::System.Data.ParameterDirection.Input, 0, 0, "map_comments", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[5].Connection = this.Connection;
            this._commandCollection[5].CommandText = "INSERT INTO [reader] \r\nVALUES (@reader_id,@location_id,@floor_id,@map_floor,@asse" +
                "t_info,@reader_info)";
            this._commandCollection[5].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@reader_id", global::System.Data.SqlDbType.NChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "reader_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@location_id", global::System.Data.SqlDbType.NChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "location_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@floor_id", global::System.Data.SqlDbType.NChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "floor_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@map_floor", global::System.Data.SqlDbType.NChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "map_floor", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@asset_info", global::System.Data.SqlDbType.NVarChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "asset_info", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[5].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@reader_info", global::System.Data.SqlDbType.NText, 1073741823, global::System.Data.ParameterDirection.Input, 0, 0, "reader_info", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[6].Connection = this.Connection;
            this._commandCollection[6].CommandText = "UPDATE [map] \r\nSET [map_floor] = @map_floor,[rooms_pfloor] = @rooms_pfloor, \r\n[as" +
                "sets_pfloor] = @assets_pfloor, [map_comments] = @map_comments \r\nWHERE [floor_id]" +
                " = @floor_id";
            this._commandCollection[6].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@map_floor", global::System.Data.SqlDbType.NChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "map_floor", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@rooms_pfloor", global::System.Data.SqlDbType.SmallInt, 2, global::System.Data.ParameterDirection.Input, 0, 0, "rooms_pfloor", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@assets_pfloor", global::System.Data.SqlDbType.SmallInt, 2, global::System.Data.ParameterDirection.Input, 0, 0, "assets_pfloor", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@map_comments", global::System.Data.SqlDbType.NText, 1073741823, global::System.Data.ParameterDirection.Input, 0, 0, "map_comments", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[6].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@floor_id", global::System.Data.SqlDbType.NChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "floor_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._commandCollection[7] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[7].Connection = this.Connection;
            this._commandCollection[7].CommandText = "UPDATE [reader] \r\nSET [location_id] = @location_id,[floor_id] = @floor_id, [map_f" +
                "loor] = @map_floor,\r\n[asset_info] = @asset_info,[reader_info] = @reader_info \r\nW" +
                "HERE [reader_id] = @reader_id";
            this._commandCollection[7].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[7].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@location_id", global::System.Data.SqlDbType.NChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "location_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@floor_id", global::System.Data.SqlDbType.NChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "floor_id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@map_floor", global::System.Data.SqlDbType.NChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "map_floor", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@asset_info", global::System.Data.SqlDbType.NVarChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "asset_info", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@reader_info", global::System.Data.SqlDbType.NText, 1073741823, global::System.Data.ParameterDirection.Input, 0, 0, "reader_info", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._commandCollection[7].Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@reader_id", global::System.Data.SqlDbType.NChar, 10, global::System.Data.ParameterDirection.Input, 0, 0, "reader_id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ztATdbLocalDataSet1.readerInfoDataTableDataTable dataTable, string searchString) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((searchString == null)) {
                throw new global::System.ArgumentNullException("searchString");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(searchString));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ztATdbLocalDataSet1.readerInfoDataTableDataTable GetData(string searchString) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((searchString == null)) {
                throw new global::System.ArgumentNullException("searchString");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(searchString));
            }
            ztATdbLocalDataSet1.readerInfoDataTableDataTable dataTable = new ztATdbLocalDataSet1.readerInfoDataTableDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillMapFloor(ztATdbLocalDataSet1.readerInfoDataTableDataTable dataTable, string mapfloor) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((mapfloor == null)) {
                throw new global::System.ArgumentNullException("mapfloor");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(mapfloor));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillReaderID(ztATdbLocalDataSet1.readerInfoDataTableDataTable dataTable, string reader_id) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((reader_id == null)) {
                throw new global::System.ArgumentNullException("reader_id");
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = ((string)(reader_id));
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, false)]
        public virtual int DeleteReaderT(string reader_id) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[1];
            if ((reader_id == null)) {
                throw new global::System.ArgumentNullException("reader_id");
            }
            else {
                command.Parameters[0].Value = ((string)(reader_id));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertMapT(string floor_id, string map_floor, global::System.Nullable<short> rooms_pfloor, global::System.Nullable<short> assets_pfloor, string map_comments) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[4];
            if ((floor_id == null)) {
                throw new global::System.ArgumentNullException("floor_id");
            }
            else {
                command.Parameters[0].Value = ((string)(floor_id));
            }
            if ((map_floor == null)) {
                throw new global::System.ArgumentNullException("map_floor");
            }
            else {
                command.Parameters[1].Value = ((string)(map_floor));
            }
            if ((rooms_pfloor.HasValue == true)) {
                command.Parameters[2].Value = ((short)(rooms_pfloor.Value));
            }
            else {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((assets_pfloor.HasValue == true)) {
                command.Parameters[3].Value = ((short)(assets_pfloor.Value));
            }
            else {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            if ((map_comments == null)) {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[4].Value = ((string)(map_comments));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, false)]
        public virtual int InsertReaderT(string reader_id, string location_id, string floor_id, string map_floor, string asset_info, string reader_info) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[5];
            if ((reader_id == null)) {
                throw new global::System.ArgumentNullException("reader_id");
            }
            else {
                command.Parameters[0].Value = ((string)(reader_id));
            }
            if ((location_id == null)) {
                throw new global::System.ArgumentNullException("location_id");
            }
            else {
                command.Parameters[1].Value = ((string)(location_id));
            }
            if ((floor_id == null)) {
                throw new global::System.ArgumentNullException("floor_id");
            }
            else {
                command.Parameters[2].Value = ((string)(floor_id));
            }
            if ((map_floor == null)) {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[3].Value = ((string)(map_floor));
            }
            if ((asset_info == null)) {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[4].Value = ((string)(asset_info));
            }
            if ((reader_info == null)) {
                command.Parameters[5].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[5].Value = ((string)(reader_info));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateMapT(string map_floor, global::System.Nullable<short> rooms_pfloor, global::System.Nullable<short> assets_pfloor, string map_comments, string floor_id) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[6];
            if ((map_floor == null)) {
                throw new global::System.ArgumentNullException("map_floor");
            }
            else {
                command.Parameters[0].Value = ((string)(map_floor));
            }
            if ((rooms_pfloor.HasValue == true)) {
                command.Parameters[1].Value = ((short)(rooms_pfloor.Value));
            }
            else {
                command.Parameters[1].Value = global::System.DBNull.Value;
            }
            if ((assets_pfloor.HasValue == true)) {
                command.Parameters[2].Value = ((short)(assets_pfloor.Value));
            }
            else {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((map_comments == null)) {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[3].Value = ((string)(map_comments));
            }
            if ((floor_id == null)) {
                throw new global::System.ArgumentNullException("floor_id");
            }
            else {
                command.Parameters[4].Value = ((string)(floor_id));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, false)]
        public virtual int UpdateReaderT(string location_id, string floor_id, string map_floor, string asset_info, string reader_info, string reader_id) {
            global::System.Data.SqlClient.SqlCommand command = this.CommandCollection[7];
            if ((location_id == null)) {
                throw new global::System.ArgumentNullException("location_id");
            }
            else {
                command.Parameters[0].Value = ((string)(location_id));
            }
            if ((floor_id == null)) {
                throw new global::System.ArgumentNullException("floor_id");
            }
            else {
                command.Parameters[1].Value = ((string)(floor_id));
            }
            if ((map_floor == null)) {
                command.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[2].Value = ((string)(map_floor));
            }
            if ((asset_info == null)) {
                command.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[3].Value = ((string)(asset_info));
            }
            if ((reader_info == null)) {
                command.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                command.Parameters[4].Value = ((string)(reader_info));
            }
            if ((reader_id == null)) {
                throw new global::System.ArgumentNullException("reader_id");
            }
            else {
                command.Parameters[5].Value = ((string)(reader_id));
            }
            global::System.Data.ConnectionState previousConnectionState = command.Connection.State;
            if (((command.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                command.Connection.Open();
            }
            int returnValue;
            try {
                returnValue = command.ExecuteNonQuery();
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    command.Connection.Close();
                }
            }
            return returnValue;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ChartingQueryTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ChartingQueryTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ChartingQuery";
            tableMapping.ColumnMappings.Add("aType", "aType");
            tableMapping.ColumnMappings.Add("aCount", "aCount");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ZTraka_App.Properties.Settings.Default.ztATdbLocalConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[7];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT amain.asset_category AS aType, COUNT (amain.asset_category) AS aCount \r\nFR" +
                "OM [asset_main] AS amain INNER JOIN [asset_stat] AS astat \r\nON amain.asset_id = " +
                "astat.asset_id\r\nGROUP BY amain.asset_category";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[1] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT astat.asset_status AS aType, COUNT (astat.asset_status) AS aCount \r\nFROM [" +
                "asset_main] AS amain INNER JOIN [asset_stat] AS astat \r\nON amain.asset_id = asta" +
                "t.asset_id\r\nGROUP BY astat.asset_status";
            this._commandCollection[1].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[2] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[2].Connection = this.Connection;
            this._commandCollection[2].CommandText = "SELECT amain.asset_category AS aType, SUM (astat.asset_value) AS aCount \r\nFROM [a" +
                "sset_main] AS amain INNER JOIN [asset_stat] AS astat \r\nON amain.asset_id = astat" +
                ".asset_id\r\nGROUP BY amain.asset_category";
            this._commandCollection[2].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[3] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[3].Connection = this.Connection;
            this._commandCollection[3].CommandText = "SELECT mp.map_floor AS aType,mp.assets_pfloor AS aCount  \r\nFROM [reader] AS rdr I" +
                "NNER JOIN [map] AS mp \r\nON rdr.floor_id = mp.floor_id \r\nGROUP BY mp.map_floor,mp" +
                ".assets_pfloor";
            this._commandCollection[3].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[4] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[4].Connection = this.Connection;
            this._commandCollection[4].CommandText = "SELECT mp.map_floor AS aType,mp.rooms_pfloor AS aCount \r\nFROM [reader] AS rdr INN" +
                "ER JOIN [map] AS mp \r\nON rdr.floor_id = mp.floor_id \r\nGROUP BY mp.map_floor,mp.r" +
                "ooms_pfloor";
            this._commandCollection[4].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[5] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[5].Connection = this.Connection;
            this._commandCollection[5].CommandText = "SELECT SUM (asset_value) AS aType,count (asset_main.asset_id) AS aCount   \r\nFROM " +
                "asset_main INNER JOIN asset_stat \r\nON asset_main.asset_id = asset_stat.asset_id " +
                "";
            this._commandCollection[5].CommandType = global::System.Data.CommandType.Text;
            this._commandCollection[6] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[6].Connection = this.Connection;
            this._commandCollection[6].CommandText = "SELECT SUM (rooms_pfloor) as aType,SUM (assets_pfloor) as aCount \r\nFROM [map]";
            this._commandCollection[6].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int ChartingACategory(ztATdbLocalDataSet1.ChartingQueryDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int ChartingAStatus(ztATdbLocalDataSet1.ChartingQueryDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int ChartingATotalValue(ztATdbLocalDataSet1.ChartingQueryDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[2];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int ChartingfAPF(ztATdbLocalDataSet1.ChartingQueryDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[3];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int ChartingfRPF(ztATdbLocalDataSet1.ChartingQueryDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[4];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillAVACount(ztATdbLocalDataSet1.ChartingQueryDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[5];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillRAPF(ztATdbLocalDataSet1.ChartingQueryDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[6];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private UserIDDataTableTableAdapter _userIDDataTableTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" +
            "", "System.Drawing.Design.UITypeEditor")]
        public UserIDDataTableTableAdapter UserIDDataTableTableAdapter {
            get {
                return this._userIDDataTableTableAdapter;
            }
            set {
                this._userIDDataTableTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._userIDDataTableTableAdapter != null) 
                            && (this._userIDDataTableTableAdapter.Connection != null))) {
                    return this._userIDDataTableTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._userIDDataTableTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateUpdatedRows(ztATdbLocalDataSet1 dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._userIDDataTableTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.UserIDDataTable.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._userIDDataTableTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateInsertedRows(ztATdbLocalDataSet1 dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._userIDDataTableTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.UserIDDataTable.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._userIDDataTableTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private int UpdateDeletedRows(ztATdbLocalDataSet1 dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._userIDDataTableTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.UserIDDataTable.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._userIDDataTableTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public virtual int UpdateAll(ztATdbLocalDataSet1 dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._userIDDataTableTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._userIDDataTableTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._userIDDataTableTableAdapter != null)) {
                    revertConnections.Add(this._userIDDataTableTableAdapter, this._userIDDataTableTableAdapter.Connection);
                    this._userIDDataTableTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._userIDDataTableTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._userIDDataTableTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._userIDDataTableTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._userIDDataTableTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._userIDDataTableTableAdapter != null)) {
                    this._userIDDataTableTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._userIDDataTableTableAdapter]));
                    this._userIDDataTableTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private bool IsChildAndParent(global::System.Data.DataRow child, global::System.Data.DataRow parent) {
                global::System.Diagnostics.Debug.Assert((child != null));
                global::System.Diagnostics.Debug.Assert((parent != null));
                global::System.Data.DataRow newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((newParent != null) 
                            && ((object.ReferenceEquals(newParent, child) == false) 
                            && (object.ReferenceEquals(newParent, parent) == false))); 
                ) {
                    newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }
                if ((newParent == null)) {
                    for (newParent = child.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original); ((newParent != null) 
                                && ((object.ReferenceEquals(newParent, child) == false) 
                                && (object.ReferenceEquals(newParent, parent) == false))); 
                    ) {
                        newParent = newParent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }
                if (object.ReferenceEquals(newParent, parent)) {
                    return true;
                }
                return false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                // Is row1 the child or grandchild of row2
                if (this.IsChildAndParent(row1, row2)) {
                    return this._childFirst;
                }

                // Is row2 the child or grandchild of row1
                if (this.IsChildAndParent(row2, row1)) {
                    return (-1 * this._childFirst);
                }
                return 0;
            }
        }
    }
}

#pragma warning restore 1591